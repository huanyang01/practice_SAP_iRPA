# XMSG : Call a web service
ACTIVITY_TITLE__Callawebservice=Call a web service

# XMIT : Call a web service
ACTIVITY_MENU__Callawebservice=Call a Web Service

# XTOL : Calls a web service.
ACTIVITY_DESC__Callsawebservice.=Calls a web service.

# XTIT : Call web service
ACTIVITY_NAME__Callwebservice=Call web service

# XTIT : Web service
ACTIVITY_CATEGORY__Webservice=Web service

# XTIT : Source URL
PROP_NAME_ACTIVITY__SourceURL=Source URL

# XTOL : The URL of the web service to be called.
PROP_DESC_ACTIVITY__TheURLofthewebservicetobecalled.=The URL of the web service to be called.

# XTOL : 
PROP_DESC_ACTIVITY___Thisparameterisrequired.=Please enter this parameter.

# XTIT : Input data
PROP_NAME_ACTIVITY__Inputdata=Input data

# XTOL : The input data of the web service.
PROP_DESC_ACTIVITY__Theinputdataofthewebservice.=The input data of the web service.

# XTIT : Output data
PROP_NAME_ACTIVITY__Outputdata=Output data

# XTOL : The variable to store web service result.
PROP_DESC_ACTIVITY__Thevariabletostorewebserviceresult.=The variable used to store the web service result.

# XTIT : data content type
PROP_NAME_ACTIVITY__datacontenttype=Data content type

# XTOL : The data content type.
PROP_DESC_ACTIVITY__Thedatacontenttype.=The data content type.

# XTIT : web service call method
PROP_NAME_ACTIVITY__webservicecallmethod=Web service call method

# XTOL : The web service call method.
PROP_DESC_ACTIVITY__Thewebservicecallmethod.=The web service call method.

# XMSG : Call SAP web service
ACTIVITY_TITLE__CallSAPwebservice=Call SAP web service

# XMIT : Call SAP web service
ACTIVITY_MENU__CallSAPwebservice=Call SAP web service

# XTOL : Call SAP web service.
ACTIVITY_DESC__CallSAPwebservice.=Call a web service.

# XTIT : Call SAP web service
ACTIVITY_NAME__CallSAPwebservice=Call SAP web service

# XMSG : Close '$app$'
ACTIVITY_TITLE__Close'$app$'=Close '$app$'

# XMIT : Close '$app$'
ACTIVITY_MENU__Close'$app$'=Close '$app$'

# XTOL : Closes a running application.
ACTIVITY_DESC__Closesarunningapplication.=Closes a running application.

# XTIT : Close
ACTIVITY_NAME__Close=Close

# XTIT : Application
ACTIVITY_CATEGORY__Application=Application

# XTIT : Application
PROP_NAME_ACTIVITY__Application=Application

# XTOL : The name of the application to close.
PROP_DESC_ACTIVITY__Thenameoftheapplicationtoclose.=The name of the application to close.

# XTIT : Wait closing
PROP_NAME_ACTIVITY__Waitclosing=Wait closing

# XTOL : If true (i.e. if the option is ticked), wait until this application is terminated.
PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntilthisapplicationisterminated.=If true (i.e. if the option is ticked), wait until this Application is terminated.

# XMSG : Connect session $session$ to '$app$'
ACTIVITY_TITLE__Connectsession$session$to'$app$'=Connect session $session$ to '$app$'

# XMIT : Connect session $session$ to '$app$'
ACTIVITY_MENU__Connectsession$session$to'$app$'=Connect session $session$ to '$app$'

# XTOL : Connects a session to HLLAPI application.
ACTIVITY_DESC__ConnectsasessiontoHLLAPIapplication.=Connects a session to the HLLAPI application.

# XTIT : Connect
ACTIVITY_NAME__Connect=Connect

# XTOL : The name of application to connect at HLLAPI session.
PROP_DESC_ACTIVITY__ThenameofapplicationtoconnectatHLLAPIsession.=The name of the application that the HLLAPI session is to be connected to.

# XTIT : Session
PROP_NAME_ACTIVITY__Session=Session

# XTOL : The session identifier to use for connexion. This one must have been previously declared in HLLAPI emulator.
PROP_DESC_ACTIVITY__Thesessionidentifiertouseforconnexion.ThisonemusthavebeenpreviouslydeclaredinHLLAPIemulator.=The session identifier to use to make the connection. It must already have been declared in the HLLAPI emulator.

# XMSG : Disconnect to '$app$'
ACTIVITY_TITLE__Disconnectto'$app$'=Disconnect from '$app$'

# XMIT : Disconnect to '$app$'
ACTIVITY_MENU__Disconnectto'$app$'=Disconnect from '$app$'

# XTOL : Disconnects a HLLAPI application.
ACTIVITY_DESC__DisconnectsaHLLAPIapplication.=Disconnects a HLLAPI application.

# XTIT : Disconnect
ACTIVITY_NAME__Disconnect=Disconnect

# XTOL : The name of application to disconnect.
PROP_DESC_ACTIVITY__Thenameofapplicationtodisconnect.=The name of the application to disconnect.

# XMSG : Highlight items of '$app$'
ACTIVITY_TITLE__Highlightitemsof'$app$'=Highlight items of '$app$'

# XMIT : Highlight items of '$app$'
ACTIVITY_MENU__Highlightitemsof'$app$'=Highlight items of '$app$'

# XTOL : Highlights all detected items in active pages of an application.
ACTIVITY_DESC__Highlightsalldetecteditemsinactivepagesofanapplication.=Highlights all detected items on an application's active pages.

# XTIT : Highlight
ACTIVITY_NAME__Highlight=Highlight

# XTOL : The name of application to use for this action.
PROP_DESC_ACTIVITY__Thenameofapplicationtouseforthisaction.=The name of the application to use for this action.

# XTIT : Duration
PROP_NAME_ACTIVITY__Duration=Duration

# XTOL : The highlight duration of detected items in milliseconds. If 0 (zero), items remain highlighted.
PROP_DESC_ACTIVITY__Thehighlightdurationofdetecteditemsinmilliseconds.If0(zero),itemsremainhighlighted.=The highlight duration of detected items in milliseconds. If 0 (zero), items remain highlighted.

# XMSG : Start '$app$'
ACTIVITY_TITLE__Start'$app$'=Start '$app$'

# XMIT : Start '$app$'
ACTIVITY_MENU__Start'$app$'=Start '$app$'

# XTOL : Starts an application.
ACTIVITY_DESC__Startsanapplication.=Starts an application.

# XTIT : Start
ACTIVITY_NAME__Start=Start

# XTOL : The name of application to start.
PROP_DESC_ACTIVITY__Thenameofapplicationtostart.=The name of the application to start.

# XTIT : Filename
PROP_NAME_ACTIVITY__Filename=Filename

# XTOL : The full path where the executable file of the application to be opened can be found. Optional.
PROP_DESC_ACTIVITY__Thefullpathwheretheexecutablefileoftheapplicationtobeopenedcanbefound.Optional.=The full path to the executable file of the application to be opened. Optional.

# XTIT : Arguments
PROP_NAME_ACTIVITY__Arguments=Arguments

# XTOL : The parameters that can be passed to the application at startup. Optional.
PROP_DESC_ACTIVITY__Theparametersthatcanbepassedtotheapplicationatstartup.Optional.=The parameters that can be passed to the application at startup. Optional.

# XTIT : Wait starting
PROP_NAME_ACTIVITY__Waitstarting=Wait starting

# XTOL : If true (i.e. if the option is ticked), wait until the application is started.
PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntiltheapplicationisstarted.=If true (i.e. if the option is ticked), wait until the application is started.

# XMSG : Declare credential
ACTIVITY_TITLE__Declarecredential=Declare credential

# XMIT : Declare credential
ACTIVITY_MENU__Declarecredential=Declare credential

# XTOL : Declares a credential
ACTIVITY_DESC__Declaresacredential=Declares a credential

# XTIT : Declare
ACTIVITY_NAME__Declare=Declare

# XTIT : Credential
ACTIVITY_CATEGORY__Credential=Credential

# XTIT : Credential name
PROP_NAME_ACTIVITY__Credentialname=Credential name

# XTIT : Comment
PROP_NAME_ACTIVITY__Comment=Comment

# XTIT : cyphering key (Mandatory for server storage)
PROP_NAME_ACTIVITY__cypheringkey(Mandatoryforserverstorage)=Encryption key (mandatory for server storage)

# XTIT : Local (false) or server (true) storage
PROP_NAME_ACTIVITY__Local(false)orserver(true)storage=Local (false) or server (true) storage

# XMSG : Get credential
ACTIVITY_TITLE__Getcredential=Get credential

# XMIT : Get credential
ACTIVITY_MENU__Getcredential=Get credential

# XTOL : Retrieves credential login and password
ACTIVITY_DESC__Retrievescredentialloginandpassword=Retrieves credential login and password

# XTIT : Get
ACTIVITY_NAME__Get=Get

# XMSG : Set credential
ACTIVITY_TITLE__Setcredential=Set credential

# XMIT : Set credential
ACTIVITY_MENU__Setcredential=Set credential

# XTOL : Sets credential login and password
ACTIVITY_DESC__Setscredentialloginandpassword=Sets credential login and password

# XTIT : Set
ACTIVITY_NAME__Set=Set

# XMSG : Notify '$event$'
ACTIVITY_TITLE__Notify'$event$'=Notify '$event$'

# XMIT : Notify '$event$'
ACTIVITY_MENU__Notify'$event$'=Notify '$event$'

# XTOL : Sends a functional event to itself or another application or page.
ACTIVITY_DESC__Sendsafunctionaleventtoitselforanotherapplicationorpage.=Sends a functional event to itself or to another application or page.

# XTIT : Notify
ACTIVITY_NAME__Notify=Notify

# XTIT : Events
ACTIVITY_CATEGORY__Events=Events

# XTIT : Event
PROP_NAME_ACTIVITY__Event=Event

# XTOL : Enter a new event name or select an existing one in the list.
PROP_DESC_ACTIVITY__Enteraneweventnameorselectanexistingoneinthelist.=Enter a new event name or select an existing one from the list.

# XTIT : Sender
PROP_NAME_ACTIVITY__Sender=Sender

# XTOL : Name of application or process which sends the functional event.
PROP_DESC_ACTIVITY__Nameofapplicationorprocesswhichsendsthefunctionalevent.=Name of the application or process sending the functional Event.

# XTIT : Data sent with the event.
PROP_NAME_ACTIVITY__Datasentwiththeevent.=Data sent with the event .

# XTOL : This is an 'expression'. Use: 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tosenddatafromthecontext,__-'...'tosendconstantvalue(Ex_'OK'),__-...tosenduservariable(Ex_myData).__=This is an expression. Use: - $data$ to send data from the context,- '...' to send a constant value (example: 'OK'),- ... to send a user variable (example: myData).

# XMSG : Wait for '$event$'
ACTIVITY_TITLE__Waitfor'$event$'=Wait for '$event$'

# XMIT : Wait for '$event$'
ACTIVITY_MENU__Waitfor'$event$'=Wait for '$event$'

# XTOL : Sets an event handler to wait for a functional event.
ACTIVITY_DESC__Setsaneventhandlertowaitforafunctionalevent.=Sets an event handler to wait for a functional event .

# XTIT : Wait for
ACTIVITY_NAME__Waitfor=Wait for

# XTOL : Name of functional event to wait.
PROP_DESC_ACTIVITY__Nameoffunctionaleventtowait.=Name of the functional event to wait for.

# XMSG : Advanced FSO manipulation
ACTIVITY_TITLE__AdvancedFSOmanipulation=Advanced FSO manipulation

# XMIT : Advanced FSO manipulation
ACTIVITY_MENU__AdvancedFSOmanipulation=Advanced FSO manipulation

# XTOL : Indicates shortly and clearly the aim of this advanced manipulation required in file system in title field of this activity.
ACTIVITYDESCIndicatesshortlyandclearlytheaimofthisadvancedmanipulationrequiredinfilesystemintitlefieldofthisactivity.DescribesindetailtheadvancedmanipulationoffilesandfolderswhichrequiredcustomcodebasedonFSOlibraryindescriptionfieldofthisactivity.Nor=In the title field of this activity, indicates shortly and clearly the aim of this advanced manipulation required in file system. In the description field, describes in detail the advanced manipulation of files and folders which required custom code based on FSO library. This activity does not generate any running code. It merely inserts an empty code block to be filled by the developer later (to realize the required actions in file system at this step). More advanced functions to manipulate files and folders are available in the FSO library.

# XTIT : Advanced FSO
ACTIVITY_NAME__AdvancedFSO=Advanced FSO

# XTIT : File
ACTIVITY_CATEGORY__File=File

# XTIT : Available functions
PROP_NAME_ACTIVITY__Availablefunctions=Available functions

# XTOL : All available functions to manipulate files and folders with FSO library. For further information, please consult the dedicated Dokuwiki page called "FSO (File System Object) library" (https://contextor.eu/dokuwiki/doku.php?id=lib:utils:fso).
PROP_DESC_ACTIVITY__AllavailablefunctionstomanipulatefilesandfolderswithFSOlibrary.Forfurtherinformation,pleaseconsultthededicatedDokuwikipagecalled"FSO(FileSystemObject)library"(https_//contextor.eu/dokuwiki/doku.php?id_lib_utils_fso).=All available functions to manipulate files and folders using the FSO library.

# XMSG : Delete file
ACTIVITY_TITLE__Deletefile=Delete file

# XMIT : Delete file
ACTIVITY_MENU__Deletefile=Delete file

# XTOL : Permanently erases a file.
ACTIVITY_DESC__Permanentlyerasesafile.=Permanently erases a file.

# XTIT : Delete file
ACTIVITY_NAME__Deletefile=Delete file

# XTIT : File
PROP_NAME_ACTIVITY__File=File

# XTOL : Full pathname to file to delete. The character '\' must be doubled. For example: C:\\myFolder\\SubFolder\\myFile.ext
PROP_DESC_ACTIVITY__Fullpathnametofiletodelete.Thecharacter'\'mustbedoubled.Forexample_C_\\myFolder\\SubFolder\\myFile.ext=Full path to the file you wish to delete. Please use double '\' - for example: C:\\myFolder\\SubFolder\\myFile.ext.

# XMSG : Download file from a remote URL
ACTIVITY_TITLE__DownloadfilefromaremoteURL=Download file from a remote URL

# XMIT : Download file from a remote URL
ACTIVITY_MENU__DownloadfilefromaremoteURL=Download file from a remote URL

# XTOL : Downloads a file from a web or network URL.
ACTIVITY_DESC__DownloadsafilefromawebornetworkURL.=Downloads a file from a web or network URL.

# XTIT : Download file
ACTIVITY_NAME__Downloadfile=Download file 

# XTOL : The URL of the source file to download.
PROP_DESC_ACTIVITY__TheURLofthesourcefiletodownload.=The URL of the source file to download.

# XTIT : local path
PROP_NAME_ACTIVITY__localpath=Local path

# XTOL : The local destination file name.
PROP_DESC_ACTIVITY__Thelocaldestinationfilename.=The local destination file name.

# XMSG : Read a CSV file
ACTIVITY_TITLE__ReadaCSVfile=Read a CSV file.

# XMIT : Read a CSV file
ACTIVITY_MENU__ReadaCSVfile=Read a CSV File

# XTOL : Reads all entries from a specified CSV (comma-separated values) file.
ACTIVITY_DESC__ReadsallentriesfromaspecifiedCSV(comma-separatedvalues)file.=Reads all entries from a specified CSV (comma-separated values) file.

# XTIT : Read CSV
ACTIVITY_NAME__ReadCSV=Read CSV

# XTIT : Source file
PROP_NAME_ACTIVITY__Sourcefile=Source file

# XTOL : The name of the source file to read with its absolute path.
PROP_DESC_ACTIVITY__Thenameofthesourcefiletoreadwithitsabsolutepath.=The name of the source file to read, along with its absolute path.

# XTIT : Encoding
PROP_NAME_ACTIVITY__Encoding=Encoding

# XTOL : The encoding type of source file: UTF-8, UTF-16, ASCII, Binary.
PROP_DESC_ACTIVITY__Theencodingtypeofsourcefile_UTF-8,UTF-16,ASCII,Binary.=The encoding type of the source file: UTF-8, UTF-16, ASCII, or binary.

# XTIT : Separator
PROP_NAME_ACTIVITY__Separator=Separator

# XTOL : Specifies the character used as field separator in the source file: '\t', ',', ';', ...
PROP_DESC_ACTIVITY__Specifiesthecharacterusedasfieldseparatorinthesourcefile_'_',',',';',...=Specifies the character used to separate fields in the source file: '\t', ',', ';', and so on.

# XTIT : Target data
PROP_NAME_ACTIVITY__Targetdata=Target data

# XTOL : The name of the variable to store the reading result.
PROP_DESC_ACTIVITY__Thenameofthevariabletostorethereadingresult.=The name of the variable to store the reading result in.

# XMSG : Read a JSON file
ACTIVITY_TITLE__ReadaJSONfile=Read a JSON file

# XMIT : Read a JSON file
ACTIVITY_MENU__ReadaJSONfile=Read a JSON file

# XTOL : Reads the content of a JSON (JavaScript Object Notation) file.
ACTIVITY_DESC__ReadsthecontentofaJSON(JavaScriptObjectNotation)file.=Reads the content of a JSON (JavaScript Object Notation) file.

# XTIT : Read JSON
ACTIVITY_NAME__ReadJSON=Read JSON

# XMSG : Read a text file
ACTIVITY_TITLE__Readatextfile=Read a text file

# XMIT : Read a text file
ACTIVITY_MENU__Readatextfile=Read a text file

# XTOL : Reads the content of a text file.
ACTIVITY_DESC__Readsthecontentofatextfile.=Reads the content of a text file.

# XTIT : Read text
ACTIVITY_NAME__Readtext=Read text 

# XMSG : Read an XML file
ACTIVITY_TITLE__ReadanXMLfile=Read an XML file

# XMIT : Read an XML file
ACTIVITY_MENU__ReadanXMLfile=Read an XML file

# XTOL : Reads the content of a XML (eXtensible Markup Language) file.
ACTIVITY_DESC__ReadsthecontentofaXML(eXtensibleMarkupLanguage)file.=Reads the content of a XML (eXtensible Markup Language) file.

# XTIT : Read XML
ACTIVITY_NAME__ReadXML=Read XML

# XMSG : Write a CSV file
ACTIVITY_TITLE__WriteaCSVfile=Write a CSV file

# XMIT : Write a CSV file
ACTIVITY_MENU__WriteaCSVfile=Write a CSV file

# XTOL : Writes a CSV (comma-separated values) file.
ACTIVITY_DESC__WritesaCSV(comma-separatedvalues)file.=Writes a CSV (comma-separated values) file.

# XTIT : Write CSV
ACTIVITY_NAME__WriteCSV=Write CSV

# XTIT : Source data
PROP_NAME_ACTIVITY__Sourcedata=Source data

# XTOL : The name of the variable which contains data to store in CSV file.
PROP_DESC_ACTIVITY__ThenameofthevariablewhichcontainsdatatostoreinCSVfile.=The name of the variable which contains data to store in CSV file.

# XTIT : Target file
PROP_NAME_ACTIVITY__Targetfile=Target file

# XTOL : The name of the target file to store data with its absolute path and its extension.
PROP_DESC_ACTIVITY__Thenameofthetargetfiletostoredatawithitsabsolutepathanditsextension.=The name of the target file to store data, along with its absolute path and its extension.

# XTOL : Specifies the character to use as field separator in target file: '\t', ',', ';', ...
PROP_DESC_ACTIVITY__Specifiesthecharactertouseasfieldseparatorintargetfile_'_',',',';',...=Specifies the character used to separate fields in the source file: '\t', ',', ';', and so on.

# XTOL : The encoding type of target file: UTF-8, UTF-16, ASCII, Binary.
PROP_DESC_ACTIVITY__Theencodingtypeoftargetfile_UTF-8,UTF-16,ASCII,Binary.=The encoding type of the source file: UTF-8, UTF-16, ASCII, or binary.

# XMSG : Write a JSON file
ACTIVITY_TITLE__WriteaJSONfile=Write a JSON file

# XMIT : Write a JSON file
ACTIVITY_MENU__WriteaJSONfile=Write a JSON file

# XTOL : Writes a JSON (JavaScript Object Notation) file.
ACTIVITY_DESC__WritesaJSON(JavaScriptObjectNotation)file.=Writes a JSON (JavaScript Object Notation) file.

# XTIT : Write JSON
ACTIVITY_NAME__WriteJSON=Write JSON

# XTOL : The name of the variable which contains data to store in JSON (JavaScript Object Notation) file.
PROP_DESC_ACTIVITY__ThenameofthevariablewhichcontainsdatatostoreinJSON(JavaScriptObjectNotation)file.=The name of the variable containing data to store in a JSON (JavaScript Object Notation) file.

# XMSG : Write a text file
ACTIVITY_TITLE__Writeatextfile=Write a text file

# XMIT : Write a text file
ACTIVITY_MENU__Writeatextfile=Write a text file

# XTOL : Writes a text file.
ACTIVITY_DESC__Writesatextfile.=Writes a text file.

# XTIT : Write text
ACTIVITY_NAME__Writetext=Write text 

# XTOL : The name of the variable which contains data to store in text file.
PROP_DESC_ACTIVITY__Thenameofthevariablewhichcontainsdatatostoreintextfile.=The name of the variable containing data to store in a text file.

# XMSG : Write an XML file
ACTIVITY_TITLE__WriteanXMLfile=Write an XML file

# XMIT : Write an XML file
ACTIVITY_MENU__WriteanXMLfile=Write an XML file

# XTOL : Writes a XML (eXtensible Markup Language) file.
ACTIVITY_DESC__WritesaXML(eXtensibleMarkupLanguage)file.=Writes an XML (eXtensible Markup Language) file.

# XTIT : Write XML
ACTIVITY_NAME__WriteXML=Write XML

# XTOL : The name of the variable which contains data to store in XML (eXtensible Markup Language) file.
PROP_DESC_ACTIVITY__ThenameofthevariablewhichcontainsdatatostoreinXML(eXtensibleMarkupLanguage)file.=The name of the variable containing data to store in an XML (eXtensible Markup Language) file.

# XTIT : Tab separator
PROP_NAME_ACTIVITY__Tabseparator=Tab separator

# XTOL : Specifies the character to use as tabulation separator: '', '\t', '  ', ...
PROP_DESC_ACTIVITY__Specifiesthecharactertouseastabulationseparator_'','_','',...=Specifies the character to use as a tabulation separator: '', '\t', '  ', and so on.

# XTOL : The character encoding of target file: UTF-8, UTF-16, ASCII, Binary.
PROP_DESC_ACTIVITY__Thecharacterencodingoftargetfile_UTF-8,UTF-16,ASCII,Binary.=The target file's character encoding: UTF-8, UTF-16, ASCII, or binary.

# XMSG : Create folder
ACTIVITY_TITLE__Createfolder=Create folder

# XMIT : Create folder
ACTIVITY_MENU__Createfolder=Create folder

# XTOL : Creates a new empty folder. This action is able to create multiple levels of new sub-folders, such as C:\\NewParentFolder\\SubFolder1\\SubFolder2, etc. In other words, an entire new folder structure (tree) can be created with a single action - each folder does not need to be created separately.
ACTIVITYDESCCreatesanewemptyfolder.Thisactionisabletocreatemultiplelevelsofnewsub-folders,suchasC\\NewParentFolder\\SubFolder1\\SubFolder2,etc.Inotherwords,anentirenewfolderstructure(tree)canbecreatedwithasingleaction-eachfolderdoesnotneedtobecreated=Creates a new empty folder. This action can create multiple levels of new sub-folders, such as C:\\NewParentFolder\\SubFolder1\\SubFolder2, and so on. In other words, an entirely new folder structure (tree) can be created in a single action, so there is no need to create each folder separately.

# XTIT : Create folder
ACTIVITY_NAME__Createfolder=Create folder

# XTIT : Folder
PROP_NAME_ACTIVITY__Folder=Folder

# XTOL : The full path of folder structure to be created. The character '\' must be doubled. For example: C:\\NewFolder\\SubFolder1
PROP_DESC_ACTIVITY__Thefullpathoffolderstructuretobecreated.Thecharacter'\'mustbedoubled.Forexample_C_\\NewFolder\\SubFolder1=The full path of the folder structure to be created. Please use double '\', for example C:\\NewFolder\\SubFolder1

# XMSG : If (else)
ACTIVITY_TITLE__If(else)=If (else)

# XMIT : If (else)
ACTIVITY_MENU__If(else)=If (else)

# XTOL : Executes a block of code following an IF action that evaluated to false.
ACTIVITY_DESC__ExecutesablockofcodefollowinganIFactionthatevaluatedtofalse.=Executes a block of code following an IF action that evaluated to false.

# XTIT : If (else)
ACTIVITY_NAME__If(else)=If (else)

# XTIT : Flow - If
ACTIVITY_CATEGORY__Flow-If=Flow - If

# XMSG : If (end)
ACTIVITY_TITLE__If(end)=If (end)

# XMIT : If (end)
ACTIVITY_MENU__If(end)=If (end)

# XTOL : End block for a if
ACTIVITY_DESC__Endblockforaif=End block for an if

# XTIT : If (end)
ACTIVITY_NAME__If(end)=If (end)

# XTIT : Flow
ACTIVITY_CATEGORY__Flow=Flow

# XMSG : If (start)
ACTIVITY_TITLE__If(start)=If (start)

# XMIT : If (start)
ACTIVITY_MENU__If(start)=If (start)

# XTOL : Start block for a if
ACTIVITY_DESC__Startblockforaif=Start block for an if

# XTIT : If (start)
ACTIVITY_NAME__If(start)=If (start)

# XTIT : Item
PROP_NAME_ACTIVITY__Item=Item

# XTIT : Condition
PROP_NAME_ACTIVITY__Condition=Condition

# XTOL : Include $item$ int the condition to perform test on the Item :
PROP_DESC_ACTIVITY__Include$item$inttheconditiontoperformtestontheItem___Ex_$item$.exist()__=Include $item$ in the condition to perform test on the item, for example: $item$.exist()

# XMSG : If ($expression$)
ACTIVITY_TITLE__If($expression$)=If ($expression$)

# XMIT : If ($expression$)
ACTIVITY_MENU__If($expression$)=If ($expression$)

# XTOL : Conditionally executes a block of actions, if the specified check of an expression evaluates to TRUE.
ACTIVITY_DESC__Conditionallyexecutesablockofactions,ifthespecifiedcheckofanexpressionevaluatestoTRUE.=Conditionally executes a block of actions if the specified check of an expression evaluates to TRUE.

# XTOL : This is an 'expression'. Use: 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$item$toperformtestonanitem(Ex_!$item$.exist())__-$data$toperformtestondatainthecontext(Ex_$data$__'')=This is an expression. Use: - $item$ to perform test on an item (example: !$item$.exist())- $data$ to perform test on data in the context (example: $data$ == '')

# XMSG : Loops to the Start block
ACTIVITY_TITLE__LoopstotheStartblock=Loops to the start block

# XMIT : Loops to the Start block
ACTIVITY_MENU__LoopstotheStartblock=Loops to the start block

# XTOL : Loops to the Start block.
ACTIVITY_DESC__LoopstotheStartblock.=Loops to the start block.

# XTIT : Loop
ACTIVITY_NAME__Loop=Loop

# XTIT : Flow - Loop
ACTIVITY_CATEGORY__Flow-Loop=Flow - Loop

# XMSG : Start loop
ACTIVITY_TITLE__Startloop=Start loop

# XMIT : Start loop
ACTIVITY_MENU__Startloop=Start loop

# XTOL : Starting instruction for a loop.
ACTIVITY_DESC__Startinginstructionforaloop.=Starting instruction for a loop.

# XMSG : Exit loop
ACTIVITY_TITLE__Exitloop=Exit loop

# XMIT : Exit loop
ACTIVITY_MENU__Exitloop=Exit loop

# XTOL : Test instruction to exit from a loop.
ACTIVITY_DESC__Testinstructiontoexitfromaloop.=Test instruction to exit from a loop.

# XTIT : Exit
ACTIVITY_NAME__Exit=Exit

# XTIT : Exit condition
PROP_NAME_ACTIVITY__Exitcondition=Exit condition

# XTOL : Include $item$ int the condition to perform test on the Item :
PROP_DESC_ACTIVITY__Include$item$inttheconditiontoperformtestontheItem___Ex_$item$exist()__=Include $item$ in the condition to perform test on the item, for example: $item$exist()

# XTOL : Test block to exit from a loop.
ACTIVITY_DESC__Testblocktoexitfromaloop.=Test block to exit from a loop.

# XTOL : This is an 'expression' to evaluate to exit or not from loop. Use: 
PROP_DESC_ACTIVITY__Thisisan'expression'toevaluatetoexitornotfromloop.Use___-$item$toperformatestonanitem(Ex_!$item$.exist()),__-$data$toperformatestondatainthecontext(Ex_$data$__'').__=This is an expression to evaluate whether or not to exit from a loop. Use: - $item$ to perform a test on an item (example: !$item$.exist()),- $data$ to perform a test on data in the context (example: $data$ == '').

# XMSG : Sequence
ACTIVITY_TITLE__Sequence=Sequence

# XMIT : Sequence
ACTIVITY_MENU__Sequence=Sequence

# XTOL : Sequence of actions.
ACTIVITY_DESC__Sequenceofactions.=Sequence of actions.

# XTIT : Sequence
ACTIVITY_NAME__Sequence=Sequence

# XMSG : No end step
ACTIVITY_TITLE__Noendstep=No end step

# XMIT : No end step
ACTIVITY_MENU__Noendstep=No end step

# XTOL : Prevent from ending the current step
ACTIVITY_DESC__Preventfromendingthecurrentstep=Prevent the current step from ending

# XTIT : No endStep
ACTIVITY_NAME__NoendStep=No end step

# XMSG : Output $value$
ACTIVITY_TITLE__Output$value$=Output $value$

# XMIT : Output $value$
ACTIVITY_MENU__Output$value$=Output $value$

# XTOL : Output value
ACTIVITY_DESC__Outputvalue=Output value

# XTIT : Output
ACTIVITY_NAME__Output=Output

# XTIT : Output value
PROP_NAME_ACTIVITY__Outputvalue=Output value

# XMSG : Reuse $step$
ACTIVITY_TITLE__Reuse$step$=Reuse $step$

# XMIT : Reuse $step$
ACTIVITY_MENU__Reuse$step$=Reuse $step$

# XTOL : Reuse step or steps.
ACTIVITY_DESC__Reusesteporsteps.=Reuse a step or steps.

# XTIT : Reuse step
ACTIVITY_NAME__Reusestep=Reuse step 

# XTIT : Step to reuse
PROP_NAME_ACTIVITY__Steptoreuse=Step to reuse

# XMSG : Wait (end)
ACTIVITY_TITLE__Wait(end)=Wait (end)

# XMIT : Wait (end)
ACTIVITY_MENU__Wait(end)=Wait (end)

# XTOL : End block for a wait
ACTIVITY_DESC__Endblockforawait=End block for a wait

# XTIT : Wait (end)
ACTIVITY_NAME__Wait(end)=Wait (end)

# XMSG : Add a job
ACTIVITY_TITLE__Addajob=Add a job

# XMIT : Add a job
ACTIVITY_MENU__Addajob=Add a job

# XTOL : Adds a job in Galaxy server.
ACTIVITY_DESC__AddsajobinGalaxyserver.=Adds a job in Factory.

# XTIT : Add Job
ACTIVITY_NAME__AddJob=Add job

# XTIT : Galaxy API
ACTIVITY_CATEGORY__GalaxyAPI=Factory API

# XTOL : The name of application which contains the scenario to add in job manager.
PROP_DESC_ACTIVITY__Thenameofapplicationwhichcontainsthescenariotoaddinjobmanager.=The name of the application containing the scenario to add in Job Manager.

# XTIT : Scenario
PROP_NAME_ACTIVITY__Scenario=Scenario

# XTOL : Scenario name
PROP_DESC_ACTIVITY__Scenarioname=Scenario name

# XTIT : Job data
PROP_NAME_ACTIVITY__Jobdata=Job data

# XTOL : Data to use for scenario execution and which will be related to the job.
PROP_DESC_ACTIVITY__Datatouseforscenarioexecutionandwhichwillberelatedtothejob.=Data to use for scenario execution and that will be related to the Job.

# XTIT : Priority
PROP_NAME_ACTIVITY__Priority=Priority

# XTOL : Job priority
PROP_DESC_ACTIVITY__Jobpriority=Job priority

# XTIT : Notification
PROP_NAME_ACTIVITY__Notification=Notification

# XTOL : Send notification when job is executed
PROP_DESC_ACTIVITY__Sendnotificationwhenjobisexecuted=Send notification when job is executed

# XMSG : Add a job list
ACTIVITY_TITLE__Addajoblist=Add a job list 

# XMIT : Add a job list
ACTIVITY_MENU__Addajoblist=Add a job list 

# XTOL : Adds a job list in Galaxy server.
ACTIVITY_DESC__AddsajoblistinGalaxyserver.=Adds a job list in Factory.

# XTIT : Add Job list
ACTIVITY_NAME__AddJoblist=Add job list 

# XTIT : Job list
PROP_NAME_ACTIVITY__Joblist=Job list 

# XTOL : Job list to be added
PROP_DESC_ACTIVITY__Joblisttobeadded=Job list to be added

# XMSG : Get a job
ACTIVITY_TITLE__Getajob=Get a job 

# XMIT : Get a job
ACTIVITY_MENU__Getajob=Get a job 

# XTOL : Gets a job in job manager.
ACTIVITY_DESC__Getsajobinjobmanager.=Gets a job in Job Manager.

# XTIT : Get job
ACTIVITY_NAME__Getjob=Get job 

# XTIT : Criteria
PROP_NAME_ACTIVITY__Criteria=Criteria

# XTOL : The criteria for job search.
PROP_DESC_ACTIVITY__Thecriteriaforjobsearch.=The criteria for the job search.

# XMSG : Get and run a job
ACTIVITY_TITLE__Getandrunajob=Get and run a job 

# XMIT : Get and run a job
ACTIVITY_MENU__Getandrunajob=Get and run a job 

# XTOL : Gets, runs and updates a job in job manager.
ACTIVITY_DESC__Gets,runsandupdatesajobinjobmanager.=Gets, runs and updates a job in Job Manager.

# XTIT : Get/run job
ACTIVITY_NAME__Get/runjob=Get/run job

# XMSG : Get a job list
ACTIVITY_TITLE__Getajoblist=Get a job list

# XMIT : Get a job list
ACTIVITY_MENU__Getajoblist=Get a job list

# XTOL : Gets a job list in Galaxy server.
ACTIVITY_DESC__GetsajoblistinGalaxyserver.=Gets a job list in Factory.

# XTIT : Get Job list
ACTIVITY_NAME__GetJoblist=Get job list

# XTIT : Job data source
PROP_NAME_ACTIVITY__Jobdatasource=Job data source

# XTOL : Job data source
PROP_DESC_ACTIVITY__Jobdatasource=Job data source

# XTIT : Max job count
PROP_NAME_ACTIVITY__Maxjobcount=Max job count

# XTOL : Max job count
PROP_DESC_ACTIVITY__Maxjobcount=Max job count

# XMSG : Check / uncheck $item$
ACTIVITY_TITLE__Check/uncheck$item$=Check / uncheck $item$

# XMIT : Check / uncheck $item$
ACTIVITY_MENU__Check/uncheck$item$=Check / uncheck $item$

# XTOL : Check / uncheck an Item
ACTIVITY_DESC__Check/uncheckanItem=Check / uncheck an item

# XTIT : Check / uncheck
ACTIVITY_NAME__Check/uncheck=Check / uncheck 

# XTIT : Item - Set
ACTIVITY_CATEGORY__Item-Set=Item - Set

# XTOL : Name of the item to use for this action.
PROP_DESC_ACTIVITY__Nameoftheitemtouseforthisaction.=Name of the item to use for this action.

# XTIT : Check or uncheck
PROP_NAME_ACTIVITY__Checkoruncheck=Check or uncheck 

# XMSG : Get $item$ in $data$
ACTIVITY_TITLE__Get$item$in$data$=Get $item$ in $data$

# XMIT : Get $item$ in $data$
ACTIVITY_MENU__Get$item$in$data$=Get $item$ in $data$

# XTOL : Get the content on an Item
ACTIVITY_DESC__GetthecontentonanItem=Get the content of an item 

# XTIT : Item - Get
ACTIVITY_CATEGORY__Item-Get=Item - Get

# XTIT : Where to store value
PROP_NAME_ACTIVITY__Wheretostorevalue=Where to store value

# XTIT : Test item existence
PROP_NAME_ACTIVITY__Testitemexistence=Test item's existence

# XMSG : Get '$item$' in $expression$
ACTIVITY_TITLE__Get'$item$'in$expression$=Get '$item$' in $expression$

# XMIT : Get '$item$' in $expression$
ACTIVITY_MENU__Get'$item$'in$expression$=Get '$item$' in $expression$

# XTOL : Get the content on a list Item
ACTIVITY_DESC__GetthecontentonalistItem=Get the content of a list item

# XTIT : Get list
ACTIVITY_NAME__Getlist=Get list 

# XTIT : Where to store result
PROP_NAME_ACTIVITY__Wheretostoreresult=Where to store result

# XTOL : This is an 'expression'. Use : 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tostoreintheContext(Ex_$data$+'+++')__-variablenametostoreinavariable(Ex_varmyVar)__-...__=This is an expression. Use: - $data$ to store in the context (example: $data$ + '+++')- variable name to store in a variable (example: var myVar)- ...

# XMSG : Get '$item$' in '$expression$'
ACTIVITY_TITLE__Get'$item$'in'$expression$'=Get '$item$' in '$expression$'

# XMIT : Get '$item$' in '$expression$'
ACTIVITY_MENU__Get'$item$'in'$expression$'=Get '$item$' in '$expression$'

# XTOL : Gets the content on an item.
ACTIVITY_DESC__Getsthecontentonanitem.=Gets the content of an item

# XTIT : Where to store result.
PROP_NAME_ACTIVITY__Wheretostoreresult.=Where to store result

# XTOL : This is an 'expression'. Use: 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tostoreinthecontext(Ex_$data$+'+++')__-variablenametostoreinavariable(Ex_varmyVar)__-...__=This is an expression. Use: - $data$ to store in the context (example: $data$ + '+++')- variable name to store in a variable (example: var myVar)- ...

# XMSG : Get table
ACTIVITY_TITLE__Gettable=Get table

# XMIT : Get table
ACTIVITY_MENU__Gettable=Get table

# XTIT : Get Table
ACTIVITY_NAME__GetTable=Get table

# XTIT : Data
PROP_NAME_ACTIVITY__Data=Data

# XTOL : Data to use for this action.
PROP_DESC_ACTIVITY__Datatouseforthisaction.=Data to use for this action.

# XMSG : Test if '$item$' is enabled
ACTIVITY_TITLE__Testif'$item$'isenabled=Test whether '$item$' is enabled

# XMIT : Test if '$item$' is enabled
ACTIVITY_MENU__Testif'$item$'isenabled=Test whether '$item$' is enabled

# XTOL : Test if an item is enabled.
ACTIVITY_DESC__Testifanitemisenabled.=Test whether an item is enabled.

# XTIT : Is enabled
ACTIVITY_NAME__Isenabled=Is enabled

# XTIT : Where to store the result of enable test.
PROP_NAME_ACTIVITY__Wheretostoretheresultofenabletest.=Where to store the result of enable test.

# XMSG : Test if '$item$' is visible
ACTIVITY_TITLE__Testif'$item$'isvisible=Test whether '$item$' is enabled

# XMIT : Test if '$item$' is visible
ACTIVITY_MENU__Testif'$item$'isvisible=Test whether '$item$' is enabled

# XTOL : Test if an item is visible.
ACTIVITY_DESC__Testifanitemisvisible.=Test whether an item is visible.

# XTIT : Is visible
ACTIVITY_NAME__Isvisible=Is visible

# XTIT : Where to store the result of visibility test.
PROP_NAME_ACTIVITY__Wheretostoretheresultofvisibilitytest.=Where to store the result of visibility test.

# XMSG : Set $expression$ in '$item$' (keystroke)
ACTIVITY_TITLE__Set$expression$in'$item$'(keystroke)=Set $expression$ in '$item$' (keystroke)

# XMIT : Set $expression$ in '$item$' (keystroke)
ACTIVITY_MENU__Set$expression$in'$item$'(keystroke)=Set $expression$ in '$item$' (keystroke)

# XTOL : Sets the content on an Item (keystroke).
ACTIVITY_DESC__SetsthecontentonanItem(keystroke).=Sets the content of an item (keystroke).

# XTIT : Keystroke
ACTIVITY_NAME__Keystroke=Keystroke

# XTOL : This is an 'expression'. Use: 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$togetdatafromthecontext(Ex_$data$+e.key.F4)__-'...'tosetaconstantvalue(Ex_'myvalue')__-...__=This is an expression. Use: - $data$ to get data from the context (example: $data$ + e.key.F4)- '...' to set a constant value (example: 'my value')- ...

# XMSG : Select $data$ in '$item$'
ACTIVITY_TITLE__Select$data$in'$item$'=Select $data$ in '$item$'

# XMIT : Select $data$ in '$item$'
ACTIVITY_MENU__Select$data$in'$item$'=Select $data$ in '$item$'

# XTOL : Selects a value in the content of the item.
ACTIVITY_DESC__Selectsavalueinthecontentoftheitem.=Selects a value in the content of the item.

# XTIT : Select
ACTIVITY_NAME__Select=Select

# XTOL : The name of the item to use for this action.
PROP_DESC_ACTIVITY__Thenameoftheitemtouseforthisaction.=The name of the item to use for this action.

# XTIT : select (check) or unselect (uncheck)
PROP_NAME_ACTIVITY__select(check)orunselect(uncheck)=Select (check) or deselect (uncheck)

# XTIT : From where get value
PROP_NAME_ACTIVITY__Fromwheregetvalue=Where to get value from

# XMSG : Select tab($index$)
ACTIVITY_TITLE__Selecttab($index$)=Select tab($index$)

# XMIT : Select tab($index$)
ACTIVITY_MENU__Selecttab($index$)=Select tab($index$)

# XTOL : Selects a tab by its index.
ACTIVITY_DESC__Selectsatabbyitsindex.=Selects a tab by its index.

# XTIT : Select tab
ACTIVITY_NAME__Selecttab=Select tab

# XTIT : Tab position
PROP_NAME_ACTIVITY__Tabposition=Tab position

# XTOL : To select a tab by its index (with numbering starts to zero):
PROP_DESC_ACTIVITY__Toselectatabbyitsindex(withnumberingstartstozero)___-Indicateaninteger(forexample_3);__-Useavariablebyusing_..._(ex__myVariable_).=To select a tab by its index (with numbering starting from zero):- Indicate an integer (example: 3);- Use a variable by using _..._ (example: _myVariable_).

# XMSG : Set $data$ in $item$
ACTIVITY_TITLE__Set$data$in$item$=Set $data$ in $item$

# XMIT : Set $data$ in $item$
ACTIVITY_MENU__Set$data$in$item$=Set $data$ in $item$

# XTOL : Set Item content
ACTIVITY_DESC__SetItemcontent=Set item's content

# XTOL : You can :
PROP_DESC_ACTIVITY__Youcan___-Selectorcreateanentryinthecontext__-Useaconstantvaluebyusing'...'(ex_'123')__-Useavariablebyusing_..._(ex__myVariable_)=You can:- Select or create an entry in the context- Use a constant value by using '...' (example: '123')- Use a variable by using _..._ (example: _myVariable_)

# XMSG : Set focus on '$item$'
ACTIVITY_TITLE__Setfocuson'$item$'=Set focus on '$item$'

# XMIT : Set focus on '$item$'
ACTIVITY_MENU__Setfocuson'$item$'=Set focus on '$item$'

# XTOL : Sets the focus on an item.
ACTIVITY_DESC__Setsthefocusonanitem.=Sets the focus on an item.

# XTIT : Set focus
ACTIVITY_NAME__Setfocus=Set focus

# XTOL : Name of the item to focus.
PROP_DESC_ACTIVITY__Nameoftheitemtofocus.=Name of the item to set focus on.

# XMSG : Set $expression$ in '$item$'
ACTIVITY_TITLE__Set$expression$in'$item$'=Set $expression$ in '$item$'

# XMIT : Set $expression$ in '$item$'
ACTIVITY_MENU__Set$expression$in'$item$'=Set $expression$ in '$item$'

# XTOL : Set the content of an item.
ACTIVITY_DESC__Setthecontentofanitem.=Set the content of an item.

# XTOL : Name of the item to fill with data.
PROP_DESC_ACTIVITY__Nameoftheitemtofillwithdata.=Name of the item to fill with data.

# XTOL : This is an 'expression'. Use : 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$togetdatafromtheContext(Ex_$data$+'+++')__-'...'tosetaconstantvalue(Ex_'myvalue')__-...__=This is an expression. Use: - $data$ to get data from the context (example: $data$ + e.key.F4)- '...' to set a constant value (example: 'my value')- ...

# XMSG : Set data in a table
ACTIVITY_TITLE__Setdatainatable=Set data in a table

# XMIT : Set data in a table
ACTIVITY_MENU__Setdatainatable=Set data in a table

# XTOL : Sets the content on an item.
ACTIVITY_DESC__Setsthecontentonanitem.=Sets the content of an item.

# XTIT : Set Table
ACTIVITY_NAME__SetTable=Set table

# XMSG : Click on '$item$'
ACTIVITY_TITLE__Clickon'$item$'=Click on '$item$'

# XMIT : Click on '$item$'
ACTIVITY_MENU__Clickon'$item$'=Click on '$item$'

# XTOL : Clicks on an item.
ACTIVITY_DESC__Clicksonanitem.=Clicks on an item.

# XTIT : Click
ACTIVITY_NAME__Click=Click

# XTIT : Item - Click
ACTIVITY_CATEGORY__Item-Click=Item - Click

# XTOL : Name of item to use for this action.
PROP_DESC_ACTIVITY__Nameofitemtouseforthisaction.=Name of item to use for this action.

# XMSG : Click (mouse) on '$item$'
ACTIVITY_TITLE__Click(mouse)on'$item$'=Click (mouse) on '$item$'

# XMIT : Click (mouse) on '$item$'
ACTIVITY_MENU__Click(mouse)on'$item$'=Click (mouse) on '$item$'

# XTOL : Simulates a mouse click on an item.
ACTIVITY_DESC__Simulatesamouseclickonanitem.=Simulates a mouse-click on an item.

# XTIT : Mouse click
ACTIVITY_NAME__Mouseclick=Mouse-click

# XTIT : X coordinate
PROP_NAME_ACTIVITY__Xcoordinate=X-coordinate

# XTOL : Horizontal position (relative to Item top left position).
PROP_DESC_ACTIVITY__Horizontalposition(relativetoItemtopleftposition).=Horizontal position (relative to item's top left position).

# XTIT : Y coordinate
PROP_NAME_ACTIVITY__Ycoordinate=Y-coordinate

# XTOL : Vertical position (relative to Item top left position).
PROP_DESC_ACTIVITY__Verticalposition(relativetoItemtopleftposition).=Vertical position (relative to item's top left position).

# XMSG : Double-click on '$item$'
ACTIVITY_TITLE__Double-clickon'$item$'=Double-click on '$item$'

# XMIT : Double-click on '$item$'
ACTIVITY_MENU__Double-clickon'$item$'=Double-click on '$item$'

# XTOL : Double-clicks on an item.
ACTIVITY_DESC__Double-clicksonanitem.=Double-clicks on an item.

# XTIT : Double click
ACTIVITY_NAME__Doubleclick=Double-click

# XTOL : Horizontal position (relative to item top left position).
PROP_DESC_ACTIVITY__Horizontalposition(relativetoitemtopleftposition).__Optional,ifomitted,thecenteroftheitemisused.=Horizontal position (relative to item\u2019s top left position). Optional. If omitted, the center of the item is used.

# XTOL : Vertical position (relative to item top left position).
PROP_DESC_ACTIVITY__Verticalposition(relativetoitemtopleftposition).=Vertical position (relative to item's top left position).

# XMSG : Right-click on '$item$'
ACTIVITY_TITLE__Right-clickon'$item$'=Right-click on '$item$'

# XMIT : Right-click on '$item$'
ACTIVITY_MENU__Right-clickon'$item$'=Right-click on '$item$'

# XTOL : Right-clicks on an item.
ACTIVITY_DESC__Right-clicksonanitem.=Right-clicks on an item.

# XTIT : Right click
ACTIVITY_NAME__Rightclick=Right-click

# XTIT : Mouse click
PROP_NAME_ACTIVITY__Mouseclick=Mouse-click

# XTOL : If checked, the action simulates a 'mouse' click.
PROP_DESC_ACTIVITY__Ifchecked,theactionsimulatesa'mouse'click.=If checked, the action simulates a mouse-click.

# XTOL : Horizontal position (relative to item top left position).
PROP_DESC_ACTIVITY__Horizontalposition(relativetoitemtopleftposition).=Horizontal position (relative to item's top left position).

# XMSG : Wait until '$item$' changes
ACTIVITY_TITLE__Waituntil'$item$'changes=Wait until '$item$' changes

# XMIT : Wait until '$item$' changes
ACTIVITY_MENU__Waituntil'$item$'changes=Wait until '$item$' changes

# XTOL : Waits until an item content changes.
ACTIVITY_DESC__Waitsuntilanitemcontentchanges.=Waits until an item's content changes.

# XTIT : Wait change
ACTIVITY_NAME__Waitchange=Wait change

# XTIT : Item - Wait
ACTIVITY_CATEGORY__Item-Wait=Item - Wait

# XMSG : Wait until user clicks on '$item$'
ACTIVITY_TITLE__Waituntiluserclickson'$item$'=Wait until user clicks on '$item$'

# XMIT : Wait until user clicks on '$item$'
ACTIVITY_MENU__Waituntiluserclickson'$item$'=Wait until user clicks on '$item$'

# XTOL : Waits until the end user clicks on an item.
ACTIVITY_DESC__Waitsuntiltheenduserclicksonanitem.=Waits until the end user clicks on an item.

# XTIT : Wait click
ACTIVITY_NAME__Waitclick=Wait click

# XMSG : Wait for CLICK event on '$item$'
ACTIVITY_TITLE__WaitforCLICKeventon'$item$'=Wait for click event on '$item$'

# XMIT : Wait for CLICK event on '$item$'
ACTIVITY_MENU__WaitforCLICKeventon'$item$'=Wait for click event on '$item$'

# XTOL : Wait for CLICK event on an item.
ACTIVITY_DESC__WaitforCLICKeventonanitem.=Wait for click event on an item.

# XMSG : Wait for COMMAND event on '$item$'
ACTIVITY_TITLE__WaitforCOMMANDeventon'$item$'=Wait for command event on '$item$'

# XMIT : Wait for COMMAND event on '$item$'
ACTIVITY_MENU__WaitforCOMMANDeventon'$item$'=Wait for command event on '$item$'

# XTOL : Wait for COMMAND event on an item.
ACTIVITY_DESC__WaitforCOMMANDeventonanitem.=Wait for command event on an item.

# XTIT : Wait command
ACTIVITY_NAME__Waitcommand=Wait command

# XMSG : Wait until '$item$' exists
ACTIVITY_TITLE__Waituntil'$item$'exists=Wait until '$item$' exists

# XMIT : Wait until '$item$' exists
ACTIVITY_MENU__Waituntil'$item$'exists=Wait until '$item$' exists

# XTOL : Waits by polling until an item exists.
ACTIVITY_DESC__Waitsbypollinguntilanitemexists.=Waits by polling until an item exists.

# XTIT : Wait exist
ACTIVITY_NAME__Waitexist=Wait exist

# XTOL : Name of item to check its existence.
PROP_DESC_ACTIVITY__Nameofitemtocheckitsexistence.=Name of the item whose existence you wish to check.

# XTIT : Interval
PROP_NAME_ACTIVITY__Interval=Interval

# XTOL : The intervals (in milliseconds) on how often to check item existence.
PROP_DESC_ACTIVITY__Theintervals(inmilliseconds)onhowoftentocheckitemexistence.=The intervals of time (in milliseconds) in which to check an item's existence.

# XMSG : Wait until '$item$' gets focus
ACTIVITY_TITLE__Waituntil'$item$'getsfocus=Wait until '$item$' gets focus

# XMIT : Wait until '$item$' gets focus
ACTIVITY_MENU__Waituntil'$item$'getsfocus=Wait until '$item$' gets focus

# XTOL : Waits until an item gets the focus.
ACTIVITY_DESC__Waitsuntilanitemgetsthefocus.=Waits until an item gets the focus.

# XTIT : Wait focus
ACTIVITY_NAME__Waitfocus=Wait focus

# XMSG : Declare key
ACTIVITY_TITLE__Declarekey=Declare key

# XMIT : Declare key
ACTIVITY_MENU__Declarekey=Declare key

# XTOL : Declares a cyphering key
ACTIVITY_DESC__Declaresacypheringkey=Declares an encryption key

# XTIT : Key
ACTIVITY_CATEGORY__Key=Key

# XTIT : Key name
PROP_NAME_ACTIVITY__Keyname=Key name

# XTIT : Key type (container or certificate)
PROP_NAME_ACTIVITY__Keytype(containerorcertificate)=Key type (container or certificate)

# XTIT : Key usage (encryption or signature)
PROP_NAME_ACTIVITY__Keyusage(encryptionorsignature)=Key usage (encryption or signature)

# XMSG : Add Worksheet
ACTIVITY_TITLE__AddWorksheet=Add worksheet

# XMIT : Add Worksheet
ACTIVITY_MENU__AddWorksheet=Add worksheet

# XTOL : Add an Excel Worksheet to the active Workbook.
ACTIVITY_DESC__AddanExcelWorksheettotheactiveWorkbook.=Add an Excel worksheet to the active workbook.

# XTIT : Add Worksheet
ACTIVITY_NAME__AddWorksheet=Add worksheet

# XTIT : Excel Lib
ACTIVITY_CATEGORY__ExcelLib=Excel Lib

# XTIT : Excel worksheet
PROP_NAME_ACTIVITY__Excelworksheet=Excel worksheet

# XTOL : The excel worksheet name. Ex.: 'Sheet1'
PROP_DESC_ACTIVITY__Theexcelworksheetname.Ex._'Sheet1'=The name of the Excel worksheet, such as 'Sheet1'

# XMSG : Close Excel
ACTIVITY_TITLE__CloseExcel=Close Excel

# XMIT : Close Excel
ACTIVITY_MENU__CloseExcel=Close Excel

# XTOL : Close Excel File.
ACTIVITY_DESC__CloseExcelFile.=Close Excel file.

# XTIT : Close Excel
ACTIVITY_NAME__CloseExcel=Close Excel

# XMSG : Create Excel
ACTIVITY_TITLE__CreateExcel=Create Excel

# XMIT : Create Excel
ACTIVITY_MENU__CreateExcel=Create Excel

# XTOL : Create Excel File.
ACTIVITY_DESC__CreateExcelFile.=Create Excel file.

# XTIT : Create Excel
ACTIVITY_NAME__CreateExcel=Create Excel

# XTOL : Create excel.
ACTIVITY_DESC__Createexcel.=Create Excel

# XMSG : End excel
ACTIVITY_TITLE__Endexcel=End Excel

# XMIT : End excel
ACTIVITY_MENU__Endexcel=End Excel

# XTOL : End excel.
ACTIVITY_DESC__Endexcel.=End Excel.

# XTIT : End Excel
ACTIVITY_NAME__EndExcel=End Excel

# XMSG : Get Cell
ACTIVITY_TITLE__GetCell=Get cell

# XMIT : Get Cell
ACTIVITY_MENU__GetCell=Get cell

# XTOL : Get a value from a cell
ACTIVITY_DESC__Getavaluefromacell=Get a value from a cell

# XTIT : Get Cell
ACTIVITY_NAME__GetCell=Get cell

# XTIT : Row
PROP_NAME_ACTIVITY__Row=Row

# XTOL : The Row number.
PROP_DESC_ACTIVITY__TheRownumber.=The row number.

# XTIT : Column
PROP_NAME_ACTIVITY__Column=Column

# XTOL : The Column number.
PROP_DESC_ACTIVITY__TheColumnnumber.=The column number.

# XTIT : Variable
PROP_NAME_ACTIVITY__Variable=Variable

# XTOL : Name of the variable of context to use for this action.
PROP_DESC_ACTIVITY__Nameofthevariableofcontexttouseforthisaction.=Name of the variable from the context to use for this action.

# XMSG : Get Workbook
ACTIVITY_TITLE__GetWorkbook=Get workbook

# XMIT : Get Workbook
ACTIVITY_MENU__GetWorkbook=Get workbook

# XTOL : Get an Excel Workbook already open.
ACTIVITY_DESC__GetanExcelWorkbookalreadyopen.=Get an Excel workbook that is already open.

# XTIT : Get Workbook
ACTIVITY_NAME__GetWorkbook=Get workbook

# XTIT : Excel workbook
PROP_NAME_ACTIVITY__Excelworkbook=Excel workbook

# XTOL : The excel workbook name. Ex.: 'Extraction.xlsx'
PROP_DESC_ACTIVITY__Theexcelworkbookname.Ex._'Extraction.xlsx'=The Excel workbook name, such as Extraction.xlsx.

# XMSG : Get Worksheet
ACTIVITY_TITLE__GetWorksheet=Get worksheet

# XMIT : Get Worksheet
ACTIVITY_MENU__GetWorksheet=Get worksheet

# XTOL : Get an Excel Worksheet from the active Workbook.
ACTIVITY_DESC__GetanExcelWorksheetfromtheactiveWorkbook.=Get an Excel worksheet from the active workbook.

# XTIT : Get Worksheet
ACTIVITY_NAME__GetWorksheet=Get worksheet

# XMSG : Get Range table
ACTIVITY_TITLE__GetRangetable=Get range table

# XMIT : Get Range table
ACTIVITY_MENU__GetRangetable=Get range table

# XTOL : Get a Range table values
ACTIVITY_DESC__GetaRangetablevalues=Get values from a range table

# XTIT : Get Range table
ACTIVITY_NAME__GetRangetable=Get range table

# XTIT : Start Column
PROP_NAME_ACTIVITY__StartColumn=Start column

# XTOL : The starting column. Ex. 'A', 'B', 'C',...
PROP_DESC_ACTIVITY__Thestartingcolumn.Ex.'A','B','C',...=The starting column. For example: 'A', 'B', 'C',...

# XTIT : Start Row
PROP_NAME_ACTIVITY__StartRow=Start row

# XTOL : The starting row. Ex. 1, 2, 3,...
PROP_DESC_ACTIVITY__Thestartingrow.Ex.1,2,3,...=The starting row. For example: 1, 2, 3.

# XTIT : Last Column
PROP_NAME_ACTIVITY__LastColumn=Last column

# XTOL : The last column. Ex. 'A', 'B', 'C',...
PROP_DESC_ACTIVITY__Thelastcolumn.Ex.'A','B','C',...=The last column. For example: 'A', 'B', 'C'.

# XTIT : Last Row
PROP_NAME_ACTIVITY__LastRow=Last row

# XTOL : The last row. Ex. 1, 2, 3,...
PROP_DESC_ACTIVITY__Thelastrow.Ex.1,2,3,...=The last row. For example: 1, 2, 3.

# XTIT : Default Value
PROP_NAME_ACTIVITY__DefaultValue=Default value

# XTOL : The default value to put in undefined cells ("undefined" by default).
PROP_DESC_ACTIVITY__Thedefaultvaluetoputinundefinedcells("undefined"bydefault).=The default value to put in undefined cells (by default, this is "undefined").

# XMSG : Initilize Excel
ACTIVITY_TITLE__InitilizeExcel=Initialize Excel

# XMIT : Initilize Excel
ACTIVITY_MENU__InitilizeExcel=Initialize Excel

# XTOL : Initilizes Excel Library with different modes.
ACTIVITY_DESC__InitilizesExcelLibrarywithdifferentmodes.=Initializes the Excel library in different modes.

# XTIT : Init Excel
ACTIVITY_NAME__InitExcel=Init Excel

# XTIT : New instance 
PROP_NAME_ACTIVITY__Newinstance=New instance

# XTOL : If true, contextor initialize Excel with a new excel process...
PROP_DESC_ACTIVITY__Iftrue,contextorinitializeExcelwithanewexcelprocess...=If true, Excel is initialized in a new Excel process.

# XTIT : Visible
PROP_NAME_ACTIVITY__Visible=Visible

# XTOL : If true, contextor initialize Excel with a visible mode...
PROP_DESC_ACTIVITY__Iftrue,contextorinitializeExcelwithavisiblemode...=If true, Excel is initialized in visible mode.

# XTIT : Display Alerts
PROP_NAME_ACTIVITY__DisplayAlerts=Display alerts

# XTOL : If true, contextor initialize Excel with a display alerts mode...
PROP_DESC_ACTIVITY__Iftrue,contextorinitializeExcelwithadisplayalertsmode...=If true, Excel is initialized in display alerts mode.

# XMSG : Open Excel
ACTIVITY_TITLE__OpenExcel=Open Excel

# XMIT : Open Excel
ACTIVITY_MENU__OpenExcel=Open Excel

# XTOL : Open Excel File.
ACTIVITY_DESC__OpenExcelFile.=Open Excel file.

# XTIT : Open Excel
ACTIVITY_NAME__OpenExcel=Open Excel

# XTIT : Excel filename
PROP_NAME_ACTIVITY__Excelfilename=Excel filename

# XTOL : The excel full filename. Ex. 'C:\\Contextor\\Extraction.xlsx'
PROP_DESC_ACTIVITY__Theexcelfullfilename.Ex.'C_\\Contextor\\Extraction.xlsx'=The full Excel filename, such as 'C:\\IRPA\\Extraction.xlsx'

# XMSG : release excel
ACTIVITY_TITLE__releaseexcel=Release Excel

# XMIT : release excel
ACTIVITY_MENU__releaseexcel=Release Excel

# XTOL : Release excel.
ACTIVITY_DESC__Releaseexcel.=Release Excel

# XTIT : Release Excel
ACTIVITY_NAME__ReleaseExcel=Release Excel

# XMSG : SaveAs Excel
ACTIVITY_TITLE__SaveAsExcel=Save as Excel

# XMIT : SaveAs Excel
ACTIVITY_MENU__SaveAsExcel=Save as Excel

# XTOL : SaveAs Excel File.
ACTIVITY_DESC__SaveAsExcelFile.=Save as an Excel file.

# XTIT : Saveas Excel
ACTIVITY_NAME__SaveasExcel=Save as Excel

# XMSG : Save Excel
ACTIVITY_TITLE__SaveExcel=Save Excel

# XMIT : Save Excel
ACTIVITY_MENU__SaveExcel=Save Excel

# XTOL : Save Excel File.
ACTIVITY_DESC__SaveExcelFile.=Save Excel file.

# XTIT : Save Excel
ACTIVITY_NAME__SaveExcel=Save Excel

# XMSG : Set Cell
ACTIVITY_TITLE__SetCell=Set cell

# XMIT : Set Cell
ACTIVITY_MENU__SetCell=Set cell

# XTOL : Set a value in a cell
ACTIVITY_DESC__Setavalueinacell=Set a value in a cell

# XTIT : Set Cell
ACTIVITY_NAME__SetCell=Set cell

# XTIT : Value
PROP_NAME_ACTIVITY__Value=Value

# XTOL : The value to set in the cell.
PROP_DESC_ACTIVITY__Thevaluetosetinthecell.=The value to set in the cell.

# XMSG : Set Range table
ACTIVITY_TITLE__SetRangetable=Set range table

# XMIT : Set Range table
ACTIVITY_MENU__SetRangetable=Set range table

# XTOL : Set a Range table values
ACTIVITY_DESC__SetaRangetablevalues=Set values in a range table

# XTIT : Set Range table
ACTIVITY_NAME__SetRangetable=Set range table

# XTIT : Use keys as header
PROP_NAME_ACTIVITY__Usekeysasheader=Use keys as headers

# XTOL : If true, contextor add the keys as Header of the table.
PROP_DESC_ACTIVITY__Iftrue,contextoraddthekeysasHeaderofthetable.=If true, the keys are added as table headers.

# XMSG : End Outlook
ACTIVITY_TITLE__EndOutlook=End Outlook

# XMIT : End Outlook
ACTIVITY_MENU__EndOutlook=End Outlook

# XTOL : End Outlook.
ACTIVITY_DESC__EndOutlook.=End Outlook

# XTIT : End Outlook
ACTIVITY_NAME__EndOutlook=End Outlook

# XTIT : Outlook Lib
ACTIVITY_CATEGORY__OutlookLib=Outlook Lib

# XMSG : Init Outlook
ACTIVITY_TITLE__InitOutlook=Init Outlook

# XMIT : Init Outlook
ACTIVITY_MENU__InitOutlook=Init Outlook

# XTOL : Init Outlook.
ACTIVITY_DESC__InitOutlook.=Initialize Outlook

# XTIT : Init Outlook
ACTIVITY_NAME__InitOutlook=Init Outlook

# XMSG : Mail attach
ACTIVITY_TITLE__Mailattach=Attach a mail

# XMIT : Mail attach
ACTIVITY_MENU__Mailattach=Attach a mail

# XTOL : Attach files to mail.
ACTIVITY_DESC__Attachfilestomail.=Attach files to a mail.

# XTIT : Mail attach
ACTIVITY_NAME__Mailattach=Attach a mail

# XTIT : Mail id
PROP_NAME_ACTIVITY__Mailid=Mail ID

# XTOL : The mail identifier
PROP_DESC_ACTIVITY__Themailidentifier=The mail identifier

# XTOL : The file or file array to be attached.
PROP_DESC_ACTIVITY__Thefileorfilearraytobeattached.=The file or file array to be attached.

# XMSG : Mail create
ACTIVITY_TITLE__Mailcreate=Create mail

# XMIT : Mail create
ACTIVITY_MENU__Mailcreate=Create mail

# XTOL : Create mail.
ACTIVITY_DESC__Createmail.=Create mail.

# XTIT : Mail create
ACTIVITY_NAME__Mailcreate=Create mail

# XTOL : The mail identifier as returned value.
PROP_DESC_ACTIVITY__Themailidentifierasreturnedvalue.=The mail identifier as a returned value.

# XTIT : Mail destination
PROP_NAME_ACTIVITY__Maildestination=Mail destination

# XTOL : The mail destination
PROP_DESC_ACTIVITY__Themaildestination=The destination of the mail

# XTIT : Mail subject
PROP_NAME_ACTIVITY__Mailsubject=Mail subject

# XTOL : The mail subject
PROP_DESC_ACTIVITY__Themailsubject=The subject of the mail

# XTIT : Mail body
PROP_NAME_ACTIVITY__Mailbody=Mail body

# XTOL : The mail body
PROP_DESC_ACTIVITY__Themailbody=The body of the mail

# XMSG : Mail send
ACTIVITY_TITLE__Mailsend=Send mail

# XMIT : Mail send
ACTIVITY_MENU__Mailsend=Send mail

# XTOL : Send mail.
ACTIVITY_DESC__Sendmail.=Send mail

# XTIT : Mail send
ACTIVITY_NAME__Mailsend=Send mail

# XMSG : Close Word
ACTIVITY_TITLE__CloseWord=Close Word

# XMIT : Close Word
ACTIVITY_MENU__CloseWord=Close Word

# XTOL : Close Word File.
ACTIVITY_DESC__CloseWordFile.=Close Word file.

# XTIT : Close Word
ACTIVITY_NAME__CloseWord=Close Word

# XTIT : Word Lib
ACTIVITY_CATEGORY__WordLib=Word lib

# XMSG : End word
ACTIVITY_TITLE__Endword=End Word

# XMIT : End word
ACTIVITY_MENU__Endword=End Word

# XTOL : End word.
ACTIVITY_DESC__Endword.=End Word

# XTIT : End Word
ACTIVITY_NAME__EndWord=End Word

# XMSG : Init word
ACTIVITY_TITLE__Initword=Init Word

# XMIT : Init word
ACTIVITY_MENU__Initword=Init Word

# XTOL : Init word.
ACTIVITY_DESC__Initword.=Init Word

# XTIT : Init Word
ACTIVITY_NAME__InitWord=Init Word

# XMSG : Open Word
ACTIVITY_TITLE__OpenWord=Open Word

# XMIT : Open Word
ACTIVITY_MENU__OpenWord=Open Word

# XTOL : Open Word File.
ACTIVITY_DESC__OpenWordFile.=Open Word file.

# XTIT : Open Word
ACTIVITY_NAME__OpenWord=Open Word

# XTIT : Word filename
PROP_NAME_ACTIVITY__Wordfilename=Word filename

# XTOL : The word full filename. Ex. 'C:\\Contextor\\Letter.docx'
PROP_DESC_ACTIVITY__Thewordfullfilename.Ex.'C_\\Contextor\\Letter.docx'=The full Word filename and path. For example: C:\\SAP\IRPA\\Letter.docx

# XMSG : Release word
ACTIVITY_TITLE__Releaseword=Release Word

# XMIT : Release word
ACTIVITY_MENU__Releaseword=Release Word

# XTOL : Release word.
ACTIVITY_DESC__Releaseword.=Release Word

# XTIT : Release Word
ACTIVITY_NAME__ReleaseWord=Release Word

# XMSG : SaveAs Word
ACTIVITY_TITLE__SaveAsWord=Save as Word

# XMIT : SaveAs Word
ACTIVITY_MENU__SaveAsWord=Save as Word

# XTOL : SaveAs Word File.
ACTIVITY_DESC__SaveAsWordFile.=Save as Word file.

# XTIT : SaveAs Word
ACTIVITY_NAME__SaveAsWord=Save as Word

# XTOL : The excel full filename. Ex. 'C:\\Contextor\\Letter.docx'
PROP_DESC_ACTIVITY__Theexcelfullfilename.Ex.'C_\\Contextor\\Letter.docx'=The full Excel filename and path. For example: 'C:\\SAP\IRPA\\Letter.xlsx'

# XMSG : Save Word
ACTIVITY_TITLE__SaveWord=Save Word

# XMIT : Save Word
ACTIVITY_MENU__SaveWord=Save Word

# XTOL : Save Word File.
ACTIVITY_DESC__SaveWordFile.=Save Word file.

# XTIT : Save Word
ACTIVITY_NAME__SaveWord=Save Word

# XMSG : Set Bookmark
ACTIVITY_TITLE__SetBookmark=Set bookmark

# XMIT : Set Bookmark
ACTIVITY_MENU__SetBookmark=Set bookmark

# XTOL : Set a Bookmark with value
ACTIVITY_DESC__SetaBookmarkwithvalue=Set a bookmark with value

# XTIT : Set Bookmark
ACTIVITY_NAME__SetBookmark=Set bookmark

# XTIT : bookmark
PROP_NAME_ACTIVITY__bookmark=Bookmark

# XTOL : The defined markbook to set. Ex. 'Name', 'Address', 'ZipCode',...
PROP_DESC_ACTIVITY__Thedefinedmarkbooktoset.Ex.'Name','Address','ZipCode',...=The defined bookmark to set, such as 'Name', 'Address', 'ZipCode'

# XTIT : The value to set in the bookmark
PROP_NAME_ACTIVITY__Thevaluetosetinthebookmark=The value to set in the bookmark.

# XTOL : The value to set in the bookmark,...
PROP_DESC_ACTIVITY__Thevaluetosetinthebookmark,...=The value to set in the bookmark

# XMSG : Close '$page$'
ACTIVITY_TITLE__Close'$page$'=Close '$page$'

# XMIT : Close '$page$'
ACTIVITY_MENU__Close'$page$'=Close '$page$'

# XTOL : Closes a page of an application.
ACTIVITY_DESC__Closesapageofanapplication.=Closes a page of an application.

# XTIT : Page
ACTIVITY_CATEGORY__Page=Page

# XTIT : Page
PROP_NAME_ACTIVITY__Page=Page

# XTOL : Name of the page of the application to close.
PROP_DESC_ACTIVITY__Nameofthepageoftheapplicationtoclose.=The name of the application page to close.

# XMSG : Get items on '$page$'
ACTIVITY_TITLE__Getitemson'$page$'=Get items on '$page$'

# XMIT : Get items on '$page$'
ACTIVITY_MENU__Getitemson'$page$'=Get items on '$page$'

# XTOL : Gets values of all items on a page.
ACTIVITY_DESC__Getsvaluesofallitemsonapage.=Gets values of all items on a page.

# XTIT : Get items
ACTIVITY_NAME__Getitems=Get items 

# XTOL : Name of the page to use for this action.
PROP_DESC_ACTIVITY__Nameofthepagetouseforthisaction.=Name of the page to use for this action.

# XTOL : Values should be stored in an object. Use: 
PROP_DESC_ACTIVITY__Valuesshouldbestoredinanobject.Use___-$data$tostorevaluesinthecurrentcontext,__-variablenametostorevaluesinadedicatedvariable(Ex_myVar).__=Values must be stored in an object. Use: - $data$ to store values in the current context,- variable name to store values in a dedicated variable (example: myVar).

# XMSG : Highlight items in '$page$'
ACTIVITY_TITLE__Highlightitemsin'$page$'=Highlight items in '$page$'

# XMIT : Highlight items in '$page$'
ACTIVITY_MENU__Highlightitemsin'$page$'=Highlight items in '$page$'

# XTOL : Highlights all detected items in a page of an application.
ACTIVITY_DESC__Highlightsalldetecteditemsinapageofanapplication.=Highlights all detected items in an application page.

# XTOL : Name of the page of the application to use for this action.
PROP_DESC_ACTIVITY__Nameofthepageoftheapplicationtouseforthisaction.=Name of the application page to use for this action.

# XTOL : Highlight duration of detected items in milliseconds. If 0 (zero), items remain highlighted.
PROP_DESC_ACTIVITY__Highlightdurationofdetecteditemsinmilliseconds.If0(zero),itemsremainhighlighted.=Highlight duration of detected items in milliseconds. If 0 (zero), items remain highlighted.

# XMSG : Send '$expression$' in '$page$'
ACTIVITY_TITLE__Send'$expression$'in'$page$'=Send '$expression$' in '$page$'

# XMIT : Send '$expression$' in '$page$'
ACTIVITY_MENU__Send'$expression$'in'$page$'=Send '$expression$' in '$page$'

# XTOL : Sends a keys sequence on a page.
ACTIVITY_DESC__Sendsakeyssequenceonapage.=Sends a key sequence to a page.

# XTIT : Keys sequence
PROP_NAME_ACTIVITY__Keyssequence=Key sequence

# XMSG : Screenshot of '$page$'
ACTIVITY_TITLE__Screenshotof'$page$'=Screenshot of '$page$'

# XMIT : Screenshot of '$page$'
ACTIVITY_MENU__Screenshotof'$page$'=Screenshot of '$page$'

# XTOL : Takes a screenshot of a page of an application.
ACTIVITY_DESC__Takesascreenshotofapageofanapplication.=Takes a screenshot of an application page.

# XTIT : Screenshot
ACTIVITY_NAME__Screenshot=Screenshot

# XTOL : Name of the target page to take a screenshot. The captured picture file is named 'YYYYMMDD_HHMMSS_MS.png' and is stored in directory '.\log\Pictures' of current project.
PROP_DESC_ACTIVITY__Nameofthetargetpagetotakeascreenshot.Thecapturedpicturefileisnamed'YYYYMMDD_HHMMSS_MS.png'andisstoredindirectory'.\log\Pictures'ofcurrentproject.=Name of the target page to take a screenshot of. The captured image file is named \u201CYYYYMMDD_HHMMSS_MS.png\u201D\u0094 and is stored in the current project's directory \u201C.\log\Pictures\u0094\u201D.

# XMSG : Start '$page$'
ACTIVITY_TITLE__Start'$page$'=Start '$page$'

# XMIT : Start '$page$'
ACTIVITY_MENU__Start'$page$'=Start '$page$'

# XTOL : Starts a page of an application.
ACTIVITY_DESC__Startsapageofanapplication.=Starts a page of an application.

# XTOL : Name of the page of the application to start.
PROP_DESC_ACTIVITY__Nameofthepageoftheapplicationtostart.=Name of the application page to start.

# XMSG : Wait callback
ACTIVITY_TITLE__Waitcallback=Wait callback

# XMIT : Wait callback
ACTIVITY_MENU__Waitcallback=Wait callback

# XTOL : Waits until the page is loaded.
ACTIVITY_DESC__Waitsuntilthepageisloaded.=Waits until the page is loaded.

# XTIT : Wait
ACTIVITY_NAME__Wait=Wait

# XTOL : Waits any page is loaded for automation.
ACTIVITY_DESC__Waitsanypageisloadedforautomation.=Waits until any page is loaded for automation.

# XTIT : Wait all
ACTIVITY_NAME__Waitall=Wait all

# XTOL : Waits until the LOAD event of the page
ACTIVITY_DESC__WaitsuntiltheLOADeventofthepage=Waits until the page's load event

# XTIT : Wait LOAD
ACTIVITY_NAME__WaitLOAD=Wait load 

# XTOL : Waits once until the LOAD event of the page
ACTIVITY_DESC__WaitsonceuntiltheLOADeventofthepage=Waits until the page's load event

# XTIT : Wait LOAD (once)
ACTIVITY_NAME__WaitLOAD(once)=Wait for load (once)

# XTOL : Waits until the page is loaded and ready for automation.
ACTIVITY_DESC__Waitsuntilthepageisloadedandreadyforautomation.=Waits until the page is loaded and ready for automation.

# XTIT : Wait ready
ACTIVITY_NAME__Waitready=Wait ready

# XMSG : Wait until '$page$' is closed
ACTIVITY_TITLE__Waituntil'$page$'isclosed=Wait until '$page$' is closed

# XMIT : Wait until '$page$' is closed
ACTIVITY_MENU__Waituntil'$page$'isclosed=Wait until '$page$' is closed

# XTOL : Waits until a page of an application is closed.
ACTIVITY_DESC__Waitsuntilapageofanapplicationisclosed.=Waits until a page of an application is closed.

# XTIT : Wait close
ACTIVITY_NAME__Waitclose=Wait close

# XMSG : Wait until '$page$' is updated
ACTIVITY_TITLE__Waituntil'$page$'isupdated=Wait until '$page$' is updated

# XMIT : Wait until '$page$' is updated
ACTIVITY_MENU__Waituntil'$page$'isupdated=Wait until '$page$' is updated

# XTOL : Waits until a page of an application is updated.
ACTIVITY_DESC__Waitsuntilapageofanapplicationisupdated.=Waits until a page of an application is updated.

# XTIT : Wait update
ACTIVITY_NAME__Waitupdate=Wait update

# XMSG : Display msgbox '$name$'
ACTIVITY_TITLE__Displaymsgbox'$name$'=Display msgbox '$name$'

# XMIT : Display msgbox '$name$'
ACTIVITY_MENU__Displaymsgbox'$name$'=Display Msgbox '$name$'

# XTOL : Displays a message box. 
ACTIVITY_DESC__Displaysamessagebox._If"Waitclosing"optionisticked,waitsuntiltheenduserclosesit.=Displays a message box. If the "Wait closing" option is selected, waits until the end user closes it.

# XTIT : MsgBox
ACTIVITY_NAME__MsgBox=MsgBox

# XTIT : Popup
ACTIVITY_CATEGORY__Popup=Popup

# XTIT : Name
PROP_NAME_ACTIVITY__Name=Name

# XTOL : Unique name of the popup to create and to display.
PROP_DESC_ACTIVITY__Uniquenameofthepopuptocreateandtodisplay.=The unique name of the popup to create and to display.

# XTIT : Title
PROP_NAME_ACTIVITY__Title=Title

# XTOL : Title of the popup to create and to display.
PROP_DESC_ACTIVITY__Titleofthepopuptocreateandtodisplay.=Title of the popup to create and to display.

# XTIT : Message
PROP_NAME_ACTIVITY__Message=Message

# XTOL : Main message text that appears in the popup window. HTML tags can be used, like: 
PROP_DESC_ACTIVITY__Mainmessagetextthatappearsinthepopupwindow.HTMLtagscanbeused,like___-<br/>toinsertabreakline,__-<b>text</b>toputthetextinbold,__-<H4>Mymessageheader</H4>tomarkaheader,__-etc.=Main message text shown in the popup window. HTML tags can be used, such as: - <br/> to insert a line break,- <b>text</b> to put the text in bold,- <H4>My message header</H4> to mark a header.

# XTIT : Template
PROP_NAME_ACTIVITY__Template=Template

# XTOL : Name of the template to use for the popup creation.
PROP_DESC_ACTIVITY__Nameofthetemplatetouseforthepopupcreation.=The name of the template to use when creating the popup.

# XTOL : If true (i.e. if the option is ticked), wait until this popup is closed by the end user.
PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntilthispopupisclosedbytheenduser.=If true (i.e. if the option is selected), wait until this popup is closed by the end user.

# XMSG : Close popup '$name$'
ACTIVITY_TITLE__Closepopup'$name$'=Close popup '$name$'

# XMIT : Close popup '$name$'
ACTIVITY_MENU__Closepopup'$name$'=Close popup '$name$'

# XTOL : Closes a popup.
ACTIVITY_DESC__Closesapopup.=Closes a popup.

# XTOL : Name of the popup to close.
PROP_DESC_ACTIVITY__Nameofthepopuptoclose.=Name of the popup to close.

# XMSG : Show tooltip '$name$'
ACTIVITY_TITLE__Showtooltip'$name$'=Show tooltip '$name$'

# XMIT : Show tooltip '$name$'
ACTIVITY_MENU__Showtooltip'$name$'=Show tooltip '$name$'

# XTOL : Shows a tooltip box, which is a small information box.
ACTIVITY_DESC__Showsatooltipbox,whichisasmallinformationbox._Besuretouseatimeoutvaluetodismissthetooltipbox,otherwisethisonewillstayonthescreen.Theendusercannotcloseatooltipbox-itdisappearsbyitself.=Shows a tooltip box, which is a small information box. Make sure you use a timeout value to dismiss the tooltip box, otherwise it will remain on the screen. The end user cannot close a tooltip box - it disappears by itself.

# XTIT : Tooltip
ACTIVITY_NAME__Tooltip=Tooltip

# XTOL : The unique name of the popup to create and to display.
PROP_DESC_ACTIVITY__Theuniquenameofthepopuptocreateandtodisplay.=The unique name of the popup to create and to display.

# XTOL : The title of the popup to create and to display.
PROP_DESC_ACTIVITY__Thetitleofthepopuptocreateandtodisplay.=The title of the popup to create and to display.

# XTIT : Background color
PROP_NAME_ACTIVITY__Backgroundcolor=Background color

# XTOL : The color of the background of tooltip.
PROP_DESC_ACTIVITY__Thecolorofthebackgroundoftooltip.=The tooltip's background color.

# XTIT : Icon
PROP_NAME_ACTIVITY__Icon=Icon

# XTOL : The icon displayed in the tooltip.
PROP_DESC_ACTIVITY__Theicondisplayedinthetooltip.=The icon displayed in the tooltip.

# XTIT : Closing delay
PROP_NAME_ACTIVITY__Closingdelay=Closing delay

# XTOL : The delay (in milliseconds) before the auto-close of tooltip.
PROP_DESC_ACTIVITY__Thedelay(inmilliseconds)beforetheauto-closeoftooltip.=The delay (in milliseconds) before the tooltip is automatically closed.

# XMSG : Get invoice results
ACTIVITY_TITLE__Getinvoiceresults=Get invoice results

# XMIT : Get invoice results
ACTIVITY_MENU__Getinvoiceresults=Get invoice results

# XTOL : Retrieves invoice results in SAP API.
ACTIVITY_DESC__RetrievesinvoiceresultsinSAPAPI.=Retrieves invoice results in SAP API.

# XTIT : Get results
ACTIVITY_NAME__Getresults=Get results

# XTIT : SAP API
ACTIVITY_CATEGORY__SAPAPI=SAP API

# XTIT : Invoice object
PROP_NAME_ACTIVITY__Invoiceobject=Invoice object

# XTOL : Invoice object
PROP_DESC_ACTIVITY__Invoiceobject=Invoice object

# XMSG : Process an invoice
ACTIVITY_TITLE__Processaninvoice=Process an invoice

# XMIT : Process an invoice
ACTIVITY_MENU__Processaninvoice=Process an invoice

# XTOL : Uploads an invoice in SAP API.
ACTIVITY_DESC__UploadsaninvoiceinSAPAPI.=Uploads an invoice to the SAP API.

# XTIT : Process invoice
ACTIVITY_NAME__Processinvoice=Process invoice

# XMSG : Scenario declaration
ACTIVITY_TITLE__Scenariodeclaration=Scenario declaration

# XMIT : Scenario declaration
ACTIVITY_MENU__Scenariodeclaration=Scenario declaration

# XTOL : Used to generate the code of scenario declaration.
ACTIVITY_DESC__Usedtogeneratethecodeofscenariodeclaration.=Used to generate code for the scenario declaration.

# XTIT : Declaration
ACTIVITY_NAME__Declaration=Declaration

# XTIT : Scenario
ACTIVITY_CATEGORY__Scenario=Scenario

# XMSG : Scenario default onerror
ACTIVITY_TITLE__Scenariodefaultonerror=Scenario default OnError

# XMIT : Scenario default onerror
ACTIVITY_MENU__Scenariodefaultonerror=Scenario Default OnError

# XTOL : Used to generate Scenario default OnError code
ACTIVITY_DESC__UsedtogenerateScenariodefaultOnErrorcode=Used to generate default OnError code for the scenario

# XTIT : Default OnError
ACTIVITY_NAME__DefaultOnError=Default OnError

# XMSG : Scenario default ontimeout
ACTIVITY_TITLE__Scenariodefaultontimeout=Scenario default OnTimeout 

# XMIT : Scenario default ontimeout
ACTIVITY_MENU__Scenariodefaultontimeout=Scenario Default OnTimeout 

# XTOL : Used to generate Scenario default OnTimeout code
ACTIVITY_DESC__UsedtogenerateScenariodefaultOnTimeoutcode=Used to generate default OnTimeout code for the scenario

# XTIT : Default OnTimeout
ACTIVITY_NAME__DefaultOnTimeout=Default OnTimeout

# XMSG : End scenario
ACTIVITY_TITLE__Endscenario=End scenario

# XMIT : End scenario
ACTIVITY_MENU__Endscenario=End Scenario

# XTOL : Ends the current scenario.
ACTIVITY_DESC__Endsthecurrentscenario.=Ends the current scenario.

# XTIT : End
ACTIVITY_NAME__End=End

# XMSG : Error management
ACTIVITY_TITLE__Errormanagement=Error management

# XMIT : Error management
ACTIVITY_MENU__Errormanagement=Error management

# XTOL : Defines a dedicated error management for a scenario.
ACTIVITY_DESC__Definesadedicatederrormanagementforascenario.=Defines dedicated error management for a scenario.

# XTIT : Error
ACTIVITY_NAME__Error=Error

# XMSG : Time-out management
ACTIVITY_TITLE__Time-outmanagement=Timeout management

# XMIT : Time-out management
ACTIVITY_MENU__Time-outmanagement=Timeout management

# XTOL : Defines a dedicated time-out management for a scenario.
ACTIVITY_DESC__Definesadedicatedtime-outmanagementforascenario.=Defines dedicated timeout management for a scenario.

# XTIT : Timeout
ACTIVITY_NAME__Timeout=Timeout

# XMSG : Start '$workflow$'
ACTIVITY_TITLE__Start'$workflow$'=Start '$workflow$'

# XMIT : Start '$workflow$'
ACTIVITY_MENU__Start'$workflow$'=Start '$workflow$'

# XTOL : Starts a specified scenario. Data to use and to manipulate with the scenario can also be specified.
ACTIVITY_DESC__Startsaspecifiedscenario.Datatouseandtomanipulatewiththescenariocanalsobespecified._The"Waitend"optionwilllaunchascenario,andwaituntilthescenarioterminatessuccessfully.Oncethescenarioterminates,executioncontinueswiththenextaction.=Starts a specified scenario. The data to use and manipulate via the Scenario can also be specified. The "Wait end" option will launch a scenario and wait until the scenario terminates successfully. Once the scenario terminates, execution continues with the next action.

# XTOL : Name of the scenario to start.
PROP_DESC_ACTIVITY__Nameofthescenariotostart.=Name of the scenario to start.

# XTIT : Data used with the scenario
PROP_NAME_ACTIVITY__Datausedwiththescenario=Data used with the scenario

# XTOL : This is an 'expression'. Use: 
PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tousedatafromthecontext,__-"..."touseconstantvalue(Ex_"myValue"),__-...touseuservariable(Ex_myData).__=This is an expression. Use: - $data$ to use data from the context,- "..." to use constant value (example: "myValue"),- ... to use user variable (example: myData).


# XTIT : Wait end
PROP_NAME_ACTIVITY__Waitend=Wait end

# XTOL : If true (i.e. if the option is ticked), wait until the scenario ends.
PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntilthescenarioends.=If true (i.e. if the option is selected), wait until the scenario ends.

# XTIT : Wait semaphore
PROP_NAME_ACTIVITY__Waitsemaphore=Wait semaphore

# XTOL : Set a wait semaphore to wait for the end of different scenarios.
PROP_DESC_ACTIVITY__Setawaitsemaphoretowaitfortheendofdifferentscenarios.=Set a wait semaphore to wait for the end of different Scenarios.

# XMSG : Scenario starter
ACTIVITY_TITLE__Scenariostarter=Scenario starter

# XMIT : Scenario starter
ACTIVITY_MENU__Scenariostarter=Scenario starter

# XTOL : Used to generate Scenario starter code
ACTIVITY_DESC__UsedtogenerateScenariostartercode=Used to generate starter code for the scenario

# XMSG : Scenario tester
ACTIVITY_TITLE__Scenariotester=Scenario tester

# XMIT : Scenario tester
ACTIVITY_MENU__Scenariotester=Scenario tester

# XTOL : Used to generate the code to create a testing entry in main menu for scenario.
ACTIVITY_DESC__Usedtogeneratethecodetocreateatestingentryinmainmenuforscenario.=Used to generate the code to create a testing entry for the scenario in the main menu.

# XTIT : Debug
ACTIVITY_NAME__Debug=Debug

# XMSG : Step declaration
ACTIVITY_TITLE__Stepdeclaration=Step declaration

# XMIT : Step declaration
ACTIVITY_MENU__Stepdeclaration=Step declaration

# XTOL : Used to generate the code of step declaration.
ACTIVITY_DESC__Usedtogeneratethecodeofstepdeclaration.=Used to generate the code for a step declaration.

# XTIT : Step
ACTIVITY_NAME__Step=Step

# XMSG : Disable step timeout
ACTIVITY_TITLE__Disablesteptimeout=Disable step timeout

# XMIT : Disable step timeout
ACTIVITY_MENU__Disablesteptimeout=Disable step timeout

# XTOL : Used to disable step timeout.
ACTIVITY_DESC__Usedtodisablesteptimeout.=Used to disable step timeout.

# XTIT : Disable timeout
ACTIVITY_NAME__Disabletimeout=Disable timeout

# XMSG : Declare setting
ACTIVITY_TITLE__Declaresetting=Declare setting

# XMIT : Declare setting
ACTIVITY_MENU__Declaresetting=Declare setting

# XTOL : Declares a setting
ACTIVITY_DESC__Declaresasetting=Declares a setting

# XTIT : Setting
ACTIVITY_CATEGORY__Setting=Setting

# XTIT : Setting name
PROP_NAME_ACTIVITY__Settingname=Setting name

# XTIT : Optional cyphering key
PROP_NAME_ACTIVITY__Optionalcypheringkey=Optional encryption key

# XMSG : Get setting
ACTIVITY_TITLE__Getsetting=Get setting

# XMIT : Get setting
ACTIVITY_MENU__Getsetting=Get setting

# XTOL : Retrieves setting value
ACTIVITY_DESC__Retrievessettingvalue=Retrieves the value of a setting

# XTIT : Setting value
PROP_NAME_ACTIVITY__Settingvalue=Setting value

# XMSG : Set setting
ACTIVITY_TITLE__Setsetting=Set setting

# XMIT : Set setting
ACTIVITY_MENU__Setsetting=Set setting

# XTOL : Sets setting value
ACTIVITY_DESC__Setssettingvalue=Sets the setting's value

# XMSG : Set to clipboard
ACTIVITY_TITLE__Settoclipboard=Set to clipboard

# XMIT : Set to clipboard
ACTIVITY_MENU__Settoclipboard=Set to clipboard

# XTOL : Places the specified text on the clipboard. The previous clipboard content is not saved.
ACTIVITY_DESC__Placesthespecifiedtextontheclipboard.Thepreviousclipboardcontentisnotsaved.=Places the specified text in the clipboard. The clipboard's previous content is not saved.

# XTIT : Set clipboard
ACTIVITY_NAME__Setclipboard=Set clipboard

# XTIT : System
ACTIVITY_CATEGORY__System=System

# XTOL : The text message to be copied to the clipboard. Use: 
PROP_DESC_ACTIVITY__Thetextmessagetobecopiedtotheclipboard.Use___-$data$tousedatafromthecontext,__-"..."touseaconstantvalue(Ex_"Mymessage"),__-...touseanuservariablemustbedeclaredbefore(Ex_myMsg).=The text message to be copied to the clipboard. Use: - $data$ to use data from the context,- "..." to use a constant value (example: "My message"),- ... to use an user variable must be declared before (example: myMsg).

# XMSG : Goal: $description$
ACTIVITY_TITLE__Goal_$description$=Goal: $description$

# XMIT : Goal: $description$
ACTIVITY_MENU__Goal_$description$=Goal: $description$

# XTOL : Describes a functional step. Provides a place to enter internal comments for the project. This allows you to include notes without having the step run. This is valuable for providing skilled descriptions. It can also help to separate different sections of your workflow. 
ACTIVITYDESCDescribesafunctionalstep.Providesaplacetoenterinternalcommentsfortheproject.Thisallowsyoutoincludenoteswithouthavingthesteprun.Thisisvaluableforprovidingskilleddescriptions.Itcanalsohelptoseparatedifferentsectionsofyourworkflow.Norunningc=Describes a functional step. Provides a place for entering internal comments on the project. This allows you to include notes without having the step run. This is valuable for providing effective descriptions. It can also help to separate different sections of your workflow. This activity does not generate any running code. It merely inserts an empty code block to be filled by the developer later (to implement the appropriate actions in this functional block).

# XTIT : Custom activity (deprecated)
ACTIVITY_NAME__Customactivity(deprecated)=Custom activity (deprecated)

# XMSG : Custom
ACTIVITY_TITLE__Custom=Custom

# XMIT : Custom
ACTIVITY_MENU__Custom=Custom

# XTOL : Describe a functionality to be implemented later in Javascript in the project.
ACTIVITY_DESC__DescribeafunctionalitytobeimplementedlaterinJavascriptintheproject.=Describe functionality to be implemented in JavaScript later in the project.

# XTIT : Custom
ACTIVITY_NAME__Custom=Custom

# XMSG : Set context
ACTIVITY_TITLE__Setcontext=Set context

# XMIT : Set context
ACTIVITY_MENU__Setcontext=Set context

# XTOL : Assigns a value to a variable of current defined context, and to update it during a run. To set it to an initial value, simply put the number or text in the "Value" field.
ACTIVITY_DESC__Assignsavaluetoavariableofcurrentdefinedcontext,andtoupdateitduringarun.Tosetittoaninitialvalue,simplyputthenumberortextinthe"Value"field.=Assigns a value to a variable of the current defined context, and update it during a run. To set it to an initial value, simply enter the number or text in the Value field.

# XTIT : Set context
ACTIVITY_NAME__Setcontext=Set context

# XTOL : Value to assign to the variable. This is an 'expression'. Use: 
PROP_DESC_ACTIVITY__Valuetoassigntothevariable.Thisisan'expression'.Use___-$data$toassigndatafromthecontext,__-"..."touseconstantvalue(Ex_"OK"),__-...tosetnumericalvalueortouseanuservariable(Ex_myData).__=Value to assign to the variable. This is an expression. Use: - $data$ to use data from the context,- "..." to use constant value (example: "myValue"),- ... to set numerical value or to use an user variable (example: myData).

# XMSG : Diagnostic
ACTIVITY_TITLE__Diagnostic=Diagnostics

# XMIT : Diagnostic
ACTIVITY_MENU__Diagnostic=Diagnostics

# XTOL : Performs a complete and advanced diagnostic. Collects data about desktop information, running environment, installed programs, JS context and XML context. This can be used for many purposes, such as to help troubleshooting issues and to make local or remote analysis. The diagnostic file called as "*.diagnostic.pscl" is stored in folder ".\Log" of current project.
ACTIVITYDESCPerformsacompleteandadvanceddiagnostic.Collectsdataaboutdesktopinformation,runningenvironment,installedprograms,JScontextandXMLcontext.Thiscanbeusedformanypurposes,suchastohelptroubleshootingissuesandtomakelocalorremoteanalysis.Thediagnos=Performs complete, advanced diagnostics. Collects data on the desktop, the running environment, installed programs, the JS context and the XML context. This can be used for many purposes, such as in troubleshooting and to perform local or remote analytics. The diagnostics file, called "*.diagnostic.pscl", is stored in the current project's .\Log folder.

# XTIT : Diagnostic
ACTIVITY_NAME__Diagnostic=Diagnostics

# XMSG : Kill '$process$'
ACTIVITY_TITLE__Kill'$process$'=Kill '$process$'

# XMIT : Kill '$process$'
ACTIVITY_MENU__Kill'$process$'=Kill '$process$'

# XTOL : Forces a running program to close. All instances of a running process are killed. The process to kill is found based on the program filename. If possible, use the close command for an application or a page because it allows the program to shut down gracefully. "Kill process" will shut the program down without saving any changes or data. To use this activity, WMI library must be included in the project.
ACTIVITYDESCForcesarunningprogramtoclose.Allinstancesofarunningprocessarekilled.Theprocesstokillisfoundbasedontheprogramfilename.Ifpossible,usetheclosecommandforanapplicationorapagebecauseitallowstheprogramtoshutdowngracefully."Killprocess"willshutth=Forces a running program to close. All instances of the running process are killed. The process to kill is found through the program filename. If possible, use the close command for applications and pages, because it allows the program to shut down gracefully. "Kill process" will shut down the program without saving any changes or data. To use this activity, you must include the WMI library in the project.

# XTIT : Kill process
ACTIVITY_NAME__Killprocess=Kill process

# XTIT : Process
PROP_NAME_ACTIVITY__Process=Process

# XTOL : The name of process to kill all running instances. For example: iexplore.exe
PROP_DESC_ACTIVITY__Thenameofprocesstokillallrunninginstances.Forexample_iexplore.exe=The name of the process to kill all running instances of. For example: iexplore.exe

# XMSG : Write log
ACTIVITY_TITLE__Writelog=Write log

# XMIT : Write log
ACTIVITY_MENU__Writelog=Write log

# XTOL : Provides a method to add your entries to the log file and in debug window with a severity level. This can be used for many purposes, such as debugging scripts, and recording information.
ACTIVITY_DESC__Providesamethodtoaddyourentriestothelogfileandindebugwindowwithaseveritylevel.Thiscanbeusedformanypurposes,suchasdebuggingscripts,andrecordinginformation.=Provides a method to add your entries to the log file and in the debug window along with a severity level. This can be used for many purposes, such as debugging scripts and recording information.

# XTIT : Log
ACTIVITY_NAME__Log=Log

# XTOL : The text message which is stored in log and appears in debug window. Only strings are supported.
PROP_DESC_ACTIVITY__Thetextmessagewhichisstoredinlogandappearsindebugwindow.Onlystringsaresupported.=The text message that is stored in the log and is shown in the debug window. Only strings are supported.

# XTIT : Level
PROP_NAME_ACTIVITY__Level=Level

# XTOL : The severity level of the message to be logged.
PROP_DESC_ACTIVITY__Theseveritylevelofthemessagetobelogged.=The severity level of the message to be logged.

# XTOL : Add a message to the log file and in debug window with a severity level.
ACTIVITY_DESC__Addamessagetothelogfileandindebugwindowwithaseveritylevel.=Add a message to the log file and in the debug window along with a severity level.

# XTOL : The text message which is stored in log and appears in debug window.
PROP_DESC_ACTIVITY__Thetextmessagewhichisstoredinlogandappearsindebugwindow.__Thisisan'expression'.Use___-$data$togetdatafromtheContext(Ex_$data$+'+++')__-'...'tosetaconstantvalue(Ex_'myvalue')__-...=The text message that is stored in the log and is shown in the debug window. This is an expression. Use : - $data$ to get data from the context (example: $data$ + '+++')- '...' to set a constant value (example: 'my value').

# XMSG : Read registry key
ACTIVITY_TITLE__Readregistrykey=Read registry key

# XMIT : Read registry key
ACTIVITY_MENU__Readregistrykey=Read registry key

# XTOL : Reads a setting from the Windows system registry.
ACTIVITY_DESC__ReadsasettingfromtheWindowssystemregistry.=Reads a setting from the Windows system registry.

# XTIT : Read registry
ACTIVITY_NAME__Readregistry=Read registry

# XTOL : Name of the variable to use for store the read result.
PROP_DESC_ACTIVITY__Nameofthevariabletouseforstorethereadresult.=Name of the variable to use to store the read result.

# XTIT : Registry key
PROP_NAME_ACTIVITY__Registrykey=Registry key

# XTOL : Entire key, including the top-level and final key name, should be put together. For example: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Version
PROP_DESC_ACTIVITY__Entirekey,includingthetop-levelandfinalkeyname,shouldbeputtogether.Forexample_HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InternetExplorer\\Version=The entire key, including the top-level and final key name, must be assembled. For example: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Version

# XMSG : Restart
ACTIVITY_TITLE__Restart=Restart

# XMIT : Restart
ACTIVITY_MENU__Restart=Restart

# XTOL : Shuts down Contextor Interactive application and restarts it with the same current running project. No user intervention is required.
ACTIVITY_DESC__ShutsdownContextorInteractiveapplicationandrestartsitwiththesamecurrentrunningproject.Nouserinterventionisrequired.=Shuts down the Desktop Agent application and restarts it with the same current running project. No user intervention is required.

# XTIT : Restart
ACTIVITY_NAME__Restart=Restart

# XMSG : Screenshot
ACTIVITY_TITLE__Screenshot=Screenshot

# XMIT : Screenshot
ACTIVITY_MENU__Screenshot=Screenshot

# XTOL : Takes a full-screen screenshot. The format of the image is Windows Bitmap (.BMP). The captured image is stored in folder '.\Log\Pictures' of current project.
ACTIVITY_DESC__Takesafull-screenscreenshot.TheformatoftheimageisWindowsBitmap(.BMP).Thecapturedimageisstoredinfolder'.\Log\Pictures'ofcurrentproject.=Takes a full-screen screenshot. The image format is Windows Bitmap (.BMP). The captured image is stored in the current project's \u201C.\Log\Pictures\u201D folder.

# XMSG : Shutdown
ACTIVITY_TITLE__Shutdown=Shutdown

# XMIT : Shutdown
ACTIVITY_MENU__Shutdown=Shutdown

# XTOL : Shuts down Contextor Interactive. No user intervention is required.
ACTIVITY_DESC__ShutsdownContextorInteractive.Nouserinterventionisrequired.=Shuts down Desktop Agent. No user intervention is required.

# XTIT : Shutdown
ACTIVITY_NAME__Shutdown=Shutdown

# XMSG : Sleep ($delay$ ms)
ACTIVITY_TITLE__Sleep($delay$ms)=Sleep ($delay$ ms)

# XMIT : Sleep ($delay$ ms)
ACTIVITY_MENU__Sleep($delay$ms)=Sleep ($delay$ ms)

# XTOL : Freezes the execution of the current thread until a time-out interval elapses.
ACTIVITY_DESC__Freezestheexecutionofthecurrentthreaduntilatime-outintervalelapses.=Freezes execution of the current thread until a timeout interval elapses.

# XTIT : Sleep
ACTIVITY_NAME__Sleep=Sleep

# XTIT : Delay
PROP_NAME_ACTIVITY__Delay=Delay

# XTOL : The time interval for which execution is to be suspended, in milliseconds.
PROP_DESC_ACTIVITY__Thetimeintervalforwhichexecutionistobesuspended,inmilliseconds.=The time interval in milliseconds during which execution will be suspended.

# XTIT : expression
PROP_NAME_ACTIVITY__expression=Expression

# XMSG : Delay ($delay$ ms)
ACTIVITY_TITLE__Delay($delay$ms)=Delay ($delay$ ms)

# XMIT : Delay ($delay$ ms)
ACTIVITY_MENU__Delay($delay$ms)=Delay ($delay$ ms)

# XTOL : Delays execution during some milliseconds.
ACTIVITYDESCDelaysexecutionduringsomemilliseconds.Thisisthestandardpausethatshouldbeusedinnormalsituations.Itsimplypausestheexecutionofthescriptfortheindicatedduration.ItpermitsuserinteractionwithContextorInteractiveandotherprogramsforthedurationofth=Delays execution for some milliseconds.\nThis is the standard pause that should be used in normal situations. It simply pauses the execution of the script for the indicated period.\nIt allows user interaction with Desktop Agent and other programs during the pause.\nThis can be useful to wait for a process to complete, to avoid going too fast for the operating system, or to give the user time to react.

# XTIT : Delay
ACTIVITY_NAME__Delay=Delay

# XTIT : Flow - Wait
ACTIVITY_CATEGORY__Flow-Wait=Flow - Wait

# XTOL : The time interval for which execution is delayed, in milliseconds.
PROP_DESC_ACTIVITY__Thetimeintervalforwhichexecutionisdelayed,inmilliseconds.=The time interval in milliseconds during which execution is delayed.

# XMSG : Wait until $expression$
ACTIVITY_TITLE__Waituntil$expression$=Wait until $expression$

# XMIT : Wait until $expression$
ACTIVITY_MENU__Waituntil$expression$=Wait until $expression$

# XTOL : Waits until a test condition evaluates to true.
ACTIVITY_DESC__Waitsuntilatestconditionevaluatestotrue.=Waits until a test condition evaluates to true.

# XTIT : Wait until
ACTIVITY_NAME__Waituntil=Wait until

# XTOL : Expression evaluated every 250 miliseconds, within the limit of 20 attempts. If condition evaluates to false, the polling is re-executed. When condition evaluates to true, control passes to the statement following. Use: 
PROPDESCACTIVITYExpressionevaluatedevery250miliseconds,withinthelimitof20attempts.Ifconditionevaluatestofalse,thepollingisre-executed.Whenconditionevaluatestotrue,controlpassestothestatementfollowing.Use-$item$toperformtestonanitem(Ex!$item$.exist())=The expression is evaluated every 250 milliseconds for up to 20 attempts. If the condition evaluates to false, polling is re-executed. When condition evaluates to true, control passes to the following statement . Use: - $item$ to perform test on an item (example: !$item$.exist()),- $data$ to perform test on data in the context (example: $data$ == '').

# XMSG : Wait for '$waitSem$'
ACTIVITY_TITLE__Waitfor'$waitSem$'=Wait for '$waitSem$'

# XMIT : Wait for '$waitSem$'
ACTIVITY_MENU__Waitfor'$waitSem$'=Wait for '$waitSem$'

# XTOL : Waits for a semaphore.
ACTIVITY_DESC__Waitsforasemaphore.=Waits for a semaphore.

# XTIT : Wait semaphore
ACTIVITY_NAME__Waitsemaphore=Wait semaphore

# XTIT : Semaphore
PROP_NAME_ACTIVITY__Semaphore=Semaphore

# XTOL : The name of the waited semaphore, which must be declared earlier.
PROP_DESC_ACTIVITY__Thenameofthewaitedsemaphore,whichmustbedeclaredearlier.=The name of the semaphore to be waited for, which must have been declared already.

# XMSG : Timer ($delay$ ms)
ACTIVITY_TITLE__Timer($delay$ms)=Timer ($delay$ ms)

# XMIT : Timer ($delay$ ms)
ACTIVITY_MENU__Timer($delay$ms)=Timer ($delay$ ms)

# XTOL : Sets a timer which executes specified actions once after the timer expires.
ACTIVITY_DESC__Setsatimerwhichexecutesspecifiedactionsonceafterthetimerexpires.=Sets a timer that executes specified actions once after the timer expires.

# XTIT : Timer
ACTIVITY_NAME__Timer=Timer

# XTIT : delay
PROP_NAME_ACTIVITY__delay=Delay

# XTOL : The number of milliseconds to wait before executing the code.
PROP_DESC_ACTIVITY__Thenumberofmillisecondstowaitbeforeexecutingthecode.=The number of milliseconds to wait before executing the code.

# XTIT : Display Name
PROP_NAME_ACTIVITY__DisplayName=Display name

# XTOL : Display Name
PROP_DESC_ACTIVITY__DisplayName=Name used to display the activity in the workflow

# XTIT : 1 - General
PROP_CATEGORY__1-General=1 - General

# XTIT : Description
PROP_NAME_ACTIVITY__Description=Description

# XTOL : Description
PROP_DESC_ACTIVITY__Description=Description of the activity 

# XTIT : 2 - Activity
PROP_CATEGORY__2-Activity=2 - Activity

# XTIT : Is Step
PROP_NAME_ACTIVITY__IsStep=Is step

# XTOL : Is Step
PROP_DESC_ACTIVITY__IsStep=Check to set this activity in a separate step

# XTIT : 3 - Code generation
PROP_CATEGORY__3-Codegeneration=3 - Code generation

# XTIT : Step name
PROP_NAME_ACTIVITY__Stepname=Step name

# XTOL : Step name
PROP_DESC_ACTIVITY__Stepname=Manually set the step name (used in generated code)

# XTIT : Wait mode
PROP_NAME_ACTIVITY__Waitmode=Wait mode

# XTOL : Set the way the Page is waited :
PROP_DESC_ACTIVITY__SetthewaythePageiswaited__-wait_standardmode_-waitReady_waituntilthePageisreadyforautomation_-waitLoad_waitforaLOADevent_-waitLoadOnce_waitonceforaLOADevent_-waitAll_waituntilanyPageloads=Set the way in which the page waits:- wait: standard mode- waitReady: wait until the page is ready for automation- waitLoad: wait for a load event- waitLoadOnce: wait once for a load Event- waitAll: wait until any page loads

# XTIT : Flow
PROPCATEGORYFlow=Flow

# XTIT : Flowchart
PROPNAMEACTIVITYFlowchart=Flowchart

# XTOL : Inserts a new flow chart.
PROPDESCACTIVITYInsertsanewflowchart.=Inserts a new flowchart.

# XTIT : Wait multiple
PROPNAMEACTIVITYWaitmultiple=Wait multiple

# XTOL : Sets a handler to wait for several events.
PROPDESCACTIVITYSetsahandlertowaitforseveralevents.=Sets a handler to wait for several events.

# XTIT : Switch output
PROPNAMEACTIVITYSwitchoutput=Switches output

# XTOL : Defines a conditional switch to follow way with different steps.
PROPDESCACTIVITYDefinesaconditionalswitchtofollowwaywithdifferentsteps.=Defines a conditional switch based on the output of the previous step.

# XTIT : SAP GUI
ACTIVITYCATEGORYSAPGUI=SAP GUI

# XMSG : Click on GUICtrlGridView cell of row $expression$ and col $col$ in $item$
ACTIVITYTITLEClickonGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Click on GUICtrlGridView cell of row $expression$ and col $col$ in $item$

# XMIT : Click on GUICtrlGridView cell of row $expression$ and col $col$ in $item$
ACTIVITYMENUClickonGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Click on GUICtrlGridView cell of row $expression$ and col $col$ in $item$

# XTOL : Click on GUICtrlGridView Cell
ACTIVITYDESCClickonGUICtrlGridViewCell=Click on GUICtrlGridView Cell

# XTIT : Click Cell
ACTIVITYNAMEClickCell=Click cell

# XTIT : Row Number
PROPNAMEACTIVITYRowNumber=Row number

# XTOL : This is an 4. Use : 
PROPDESCACTIVITYThisisan4.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex'myvalue')-...=This is an \u2018expression\u2019. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 'my value')\n- ...\n

# XTIT : Column Code
PROPNAMEACTIVITYColumnCode=Column code

# XMSG : Get data from GUICtrlGridView cell of row $expression$ and col $col$ in $item$
ACTIVITYTITLEGetdatafromGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Get data from GUICtrlGridView cell of row $expression$ and col $col$ in $item$

# XMIT : Get data from GUICtrlGridView cell of row $expression$ and col $col$ in $item$
ACTIVITYMENUGetdatafromGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Get data from GUICtrlGridView cell of row $expression$ and col $col$ in $item$

# XTOL : Get data from GUICtrlGridView cell
ACTIVITYDESCGetdatafromGUICtrlGridViewcell=Get data from GUICtrlGridView cell

# XMSG : Get the list of Columns from GUICtrlGridView in $item$
ACTIVITYTITLEGetthelistofColumnsfromGUICtrlGridViewin$item$=Get the list of columns from GUICtrlGridView in $item$

# XMIT : Get the list of Columns from GUICtrlGridView in $item$
ACTIVITYMENUGetthelistofColumnsfromGUICtrlGridViewin$item$=Get the list of columns from GUICtrlGridView in $item$

# XTOL : Get the list of Columns from GUICtrlGridView
ACTIVITYDESCGetthelistofColumnsfromGUICtrlGridView=Get the list of columns from GUICtrlGridView

# XTIT : Get Columns
ACTIVITYNAMEGetColumns=Get columns

# XMSG : Get data from GUICtrlGridView row $expression$ in $item$
ACTIVITYTITLEGetdatafromGUICtrlGridViewrow$expression$in$item$=Get data from GUICtrlGridView row $expression$ in $item$

# XMIT : Get data from GUICtrlGridView row $expression$ in $item$
ACTIVITYMENUGetdatafromGUICtrlGridViewrow$expression$in$item$=Get data from GUICtrlGridView row $expression$ in $item$

# XTOL : Get data from GUICtrlGridView row
ACTIVITYDESCGetdatafromGUICtrlGridViewrow=Get data from GUICtrlGridView row

# XTIT : Get Row
ACTIVITYNAMEGetRow=Get row

# XMSG : Get the number of rows from GUICtrlGridView in $item$
ACTIVITYTITLEGetthenumberofrowsfromGUICtrlGridViewin$item$=Get the number of rows from GUICtrlGridView in $item$

# XMIT : Get the number of rows from GUICtrlGridView in $item$
ACTIVITYMENUGetthenumberofrowsfromGUICtrlGridViewin$item$=Get the number of rows from GUICtrlGridView in $item$

# XTOL : Get the number of rows from GUICtrlGridView
ACTIVITYDESCGetthenumberofrowsfromGUICtrlGridView=Get the number of rows from GUICtrlGridView

# XTIT : Get Row Count
ACTIVITYNAMEGetRowCount=Get row count

# XMSG : Select the GUICtrlGridView Cell of row $expression$ and col $col$ in $item$
ACTIVITYTITLESelecttheGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Select the GUICtrlGridView cell of row $expression$ and col $col$ in $item$

# XMIT : Select the GUICtrlGridView Cell of row $expression$ and col $col$ in $item$
ACTIVITYMENUSelecttheGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Select the GUICtrlGridView cell of row $expression$ and col $col$ in $item$

# XTOL : Select the GUICtrlGridView Cell
ACTIVITYDESCSelecttheGUICtrlGridViewCell=Select the GUICtrlGridView cell

# XTIT : Select Cell
ACTIVITYNAMESelectCell=Select cell

# XTOL : This is an 'expression'. Use : 
PROPDESCACTIVITYThisisan'expression'.Use-$data$togetdatafromtheContext(Ex$col$+'+++')-'...'tosetaconstantvalue(Ex'myvalue')-...=This is an 'expression'. Use : \n- $data$ to get data from the context (example: $col$ + '+++')\n- '...' to set a constant value (example: 'my value')\n- ...\n

# XMSG : Get the selected column from GUICtrlGridView in $item$
ACTIVITYTITLEGettheselectedcolumnfromGUICtrlGridViewin$item$=Get the selected column from GUICtrlGridView in $item$

# XMIT : Get the selected column from GUICtrlGridView in $item$
ACTIVITYMENUGettheselectedcolumnfromGUICtrlGridViewin$item$=Get the selected column from GUICtrlGridView in $item$

# XTOL : Get the selected column from GUICtrlGridView
ACTIVITYDESCGettheselectedcolumnfromGUICtrlGridView=Get the selected column from GUICtrlGridView

# XTIT : Selected Column
ACTIVITYNAMESelectedColumn=Selected column

# XMSG : Get the selected row from GUICtrlGridView in $item$
ACTIVITYTITLEGettheselectedrowfromGUICtrlGridViewin$item$=Get the selected row from GUICtrlGridView in $item$

# XMIT : Get the selected row from GUICtrlGridView in $item$
ACTIVITYMENUGettheselectedrowfromGUICtrlGridViewin$item$=Get the selected row from GUICtrlGridView in $item$

# XTOL : Get the selected row from GUICtrlGridView
ACTIVITYDESCGettheselectedrowfromGUICtrlGridView=Get the selected row from GUICtrlGridView

# XTIT : Selected Row
ACTIVITYNAMESelectedRow=Selected row

# XMSG : Click toolbar menu item of ID $expression$ in $item$
ACTIVITYTITLEClicktoolbarmenuitemofID$expression$in$item$=Click toolbar menu item of ID $expression$ in $item$

# XMIT : Click toolbar menu item of ID $expression$ in $item$
ACTIVITYMENUClicktoolbarmenuitemofID$expression$in$item$=Click toolbar menu item of ID $expression$ in $item$

# XTOL : Click toolbar menu item
ACTIVITYDESCClicktoolbarmenuitem=Click toolbar menu item

# XTIT : Select Toolbar Menu Item By Technical ID
ACTIVITYNAMESelectToolbarMenuItemByTechnicalID=Select toolbar menu item by technical ID

# XTIT : Menu item's Id
PROPNAMEACTIVITYMenuitem'sId=Menu item's ID

# XMSG : Click toolbar menu item of Position $expression$ in $item$
ACTIVITYTITLEClicktoolbarmenuitemofPosition$expression$in$item$=Click toolbar menu item of position $expression$ in $item$

# XMIT : Click toolbar menu item of Position $expression$ in $item$
ACTIVITYMENUClicktoolbarmenuitemofPosition$expression$in$item$=Click toolbar menu item of position $expression$ in $item$

# XTIT : Select Toolbar Menu By Position
ACTIVITYNAMESelectToolbarMenuByPosition=Select toolbar menu item by position

# XTIT : Menu item's position
PROPNAMEACTIVITYMenuitem'sposition=Menu item's position

# XMSG : Click toolbar menu item of Text $expression$ in $item$
ACTIVITYTITLEClicktoolbarmenuitemofText$expression$in$item$=Click toolbar menu item of text $expression$ in $item$

# XMIT : Click toolbar menu item of Text $expression$ in $item$
ACTIVITYMENUClicktoolbarmenuitemofText$expression$in$item$=Click toolbar menu item of text $expression$ in $item$

# XTIT : Select Toolbar Menu By Text
ACTIVITYNAMESelectToolbarMenuByText=Select toolbar menu by text

# XTIT : Menu item's text
PROPNAMEACTIVITYMenuitem'stext=Menu item's text

# XMSG : Set value $expression$ in GUICtrlGridView Cell of row $row$ and col $col$ in $item$
ACTIVITYTITLESetvalue$expression$inGUICtrlGridViewCellofrow$row$andcol$col$in$item$=Set value $expression$ in GUICtrlGridView Cell of row $row$ and col $col$ in $item$

# XMIT : Set value $expression$ in GUICtrlGridView Cell of row $row$ and col $col$ in $item$
ACTIVITYMENUSetvalue$expression$inGUICtrlGridViewCellofrow$row$andcol$col$in$item$=Set value $expression$ in GUICtrlGridView Cell of row $row$ and col $col$ in $item$

# XTOL : Set value in GUICtrlGridView Cell
ACTIVITYDESCSetvalueinGUICtrlGridViewCell=Set value in GUICtrlGridView cell

# XTIT : Select Toolbar Menu Item By ID
ACTIVITYNAMESelectToolbarMenuItemByID=Select toolbar menu item by ID

# XTIT : Select Toolbar Menu Item By Position
ACTIVITYNAMESelectToolbarMenuItemByPosition=Select toolbar menu item by position

# XTIT : Select Toolbar Menu Item By Text
ACTIVITYNAMESelectToolbarMenuItemByText=Select toolbar menu item by text

# XMSG : Change active sheet
ACTIVITYTITLEChangeactivesheet=Change the active sheet.

# XMIT : Change active sheet
ACTIVITYMENUChangeactivesheet=Change active sheet

# XTOL : Change active sheet.
ACTIVITYDESCChangeactivesheet.=Change the active sheet.

# XTIT : Change active sheet
ACTIVITYNAMEChangeactivesheet=Change active sheet

# XTIT : Worksheet name
PROPNAMEACTIVITYWorksheetname=Worksheet name

# XTOL : The excel full filename. Please use the double quote. Ex. "Sheet1"  
PROPDESCACTIVITYTheexcelfullfilename.Pleaseusethedoublequote.Ex."Sheet1"=The full Excel filename. Please use double quotes, such as "Sheet1".

# XMSG : Format BackgroundColor
ACTIVITYTITLEFormatBackgroundColor=Format the background color.

# XMIT : Format BackgroundColor
ACTIVITYMENUFormatBackgroundColor=Format background color

# XTOL : Change the background color of a range
ACTIVITYDESCChangethebackgroundcolorofarange=Change the background color of a range.

# XTIT : Format BackgroundColor
ACTIVITYNAMEFormatBackgroundColor=Format background color

# XTIT : Excel Lib|Formatting
ACTIVITYCATEGORYExcelLib|Formatting=Excel Lib|Formatting

# XTIT : Definition of Range
PROPNAMEACTIVITYDefinitionofRange=Range definition

# XTOL : String which represents the range. Here are some examples for a range "A;5;G;67" or "1;5;7;67" or "A5:G67". Here are some examples for a single cell A;8 or 1;8 or A8
PROPDESCACTIVITYStringwhichrepresentstherange.Herearesomeexamplesforarange"A;5;G;67"or"1;5;7;67"or"A5G67".HerearesomeexamplesforasinglecellA;8or1;8orA8=String representing the range. Here are some examples of a range: "A;5;G;67" or "1;5;7;67" or "A5:G67". Here are some examples of a single cell: A;8 or 1;8 or A8.

# XTIT : Font Color
PROPNAMEACTIVITYFontColor=Font color

# XTOL : Color to apply as an Array RGB. The collection e.color.rgb can be used to select predefined colors.
PROPDESCACTIVITYColortoapplyasanArrayRGB.Thecollectione.color.rgbcanbeusedtoselectpredefinedcolors.=Color to apply as an array RGB. The collection e.color.rgb can be used to select predefined colors.

# XMSG : Format Bold
ACTIVITYTITLEFormatBold=Format bold

# XMIT : Format Bold
ACTIVITYMENUFormatBold=Format bold

# XTOL : Format the text of a range as bold
ACTIVITYDESCFormatthetextofarangeasbold=Format the text of a range as bold.

# XTIT : Format Bold
ACTIVITYNAMEFormatBold=Format bold

# XTIT : Activate Bold
PROPNAMEACTIVITYActivateBold=Activate bold

# XTOL : true to activate Bold. false to remove it.
PROPDESCACTIVITYtruetoactivateBold.falsetoremoveit.=True to activate bold, false to remove it.

# XMSG : Format FontColor
ACTIVITYTITLEFormatFontColor=Format the font color.

# XMIT : Format FontColor
ACTIVITYMENUFormatFontColor=Format font color

# XTOL : Change the fontColor of a range
ACTIVITYDESCChangethefontColorofarange=Change the font color of a range.

# XTIT : Format FontColor
ACTIVITYNAMEFormatFontColor=Format font color

# XMSG : Format FontSize
ACTIVITYTITLEFormatFontSize=Format the font size.

# XMIT : Format FontSize
ACTIVITYMENUFormatFontSize=Format font size

# XTOL : Change the fontSize of a range
ACTIVITYDESCChangethefontSizeofarange=Change the font size of a range.

# XTIT : Format FontSize
ACTIVITYNAMEFormatFontSize=Format font size

# XTIT : Font Size
PROPNAMEACTIVITYFontSize=Font size 

# XTOL : Font size to apply. Define a positive integer.
PROPDESCACTIVITYFontsizetoapply.Defineapositiveinteger.=Font size to apply. Define a positive integer.

# XMSG : Format Italic
ACTIVITYTITLEFormatItalic=Format italic.

# XMIT : Format Italic
ACTIVITYMENUFormatItalic=Format italic

# XTOL : Format the text of a range as italic
ACTIVITYDESCFormatthetextofarangeasitalic=Format the text of a range as italic.

# XTIT : Format Italic
ACTIVITYNAMEFormatItalic=Format italic

# XTIT : Activate Italic
PROPNAMEACTIVITYActivateItalic=Activate italic

# XTOL : true to activate Italic. false to remove it.
PROPDESCACTIVITYtruetoactivateItalic.falsetoremoveit.=True to activate italic, false to remove it.

# XMSG : Get Formulas
ACTIVITYTITLEGetFormulas=Get formulas.

# XMIT : Get Formulas
ACTIVITYMENUGetFormulas=Get formulas

# XTOL : Get formulas from a range
ACTIVITYDESCGetformulasfromarange=Get the formulas from a range.

# XTIT : Get Formulas
ACTIVITYNAMEGetFormulas=Get formulas

# XTOL : The starting column. Ex. 'A', 'b', 3,... \n The limit is "XFD" or 16384.
PROPDESCACTIVITYThestartingcolumn.Ex.'A','b',3,...Thelimitis"XFD"or16384.=The starting column, such as  'A', 'b', 3,... \n The limit is "XFD" or 16384.

# XTOL : The last column. Ex. 'A', 'b', 3,...  \n The limit is "XFD" or 16384.
PROPDESCACTIVITYThelastcolumn.Ex.'A','b',3,...Thelimitis"XFD"or16384.=The last column such as  'A', 'b', 3,...  \n The limit is "XFD" or 16384.

# XTIT : Default Value or Formula to fill undefined cells
PROPNAMEACTIVITYDefaultValueorFormulatofillundefinedcells=Default value or formula for undefined cells

# XTOL : The default value or formula to put in undefined cells ("undefined" by default).
PROPDESCACTIVITYThedefaultvalueorformulatoputinundefinedcells("undefined"bydefault).=The default value to put in undefined cells (by default, this is "undefined").

# XMSG : Clear Formatting
ACTIVITYTITLEClearFormatting=Clear formatting.

# XMIT : Clear Formatting
ACTIVITYMENUClearFormatting=Clear formatting

# XTOL : Clear Formatting
ACTIVITYDESCClearFormatting=Clear the formatting.

# XTIT : Clear Formatting
ACTIVITYNAMEClearFormatting=Clear formatting

# XTIT : Word Lib|Formatting
ACTIVITYCATEGORYWordLib|Formatting=Word Lib|Formatting

# XTOL : Format Bold
ACTIVITYDESCFormatBold=Format bold

# XTOL : True to activate bold. False to remove it.
PROPDESCACTIVITYTruetoactivatebold.Falsetoremoveit.=True to activate bold. False to remove it.

# XTOL : Format Italic
ACTIVITYDESCFormatItalic=Format  italic

# XTOL : True to activate Italic. False to remove it.
PROPDESCACTIVITYTruetoactivateItalic.Falsetoremoveit.=True to activate italic. False to remove it.

# XTOL : Format FontSize
ACTIVITYDESCFormatFontSize=Format font size

# XTOL : The font size is a positive integer.
PROPDESCACTIVITYThefontsizeisapositiveinteger.=The font size is a positive integer.

# XMSG : Format Highlight
ACTIVITYTITLEFormatHighlight=Format highlight.

# XMIT : Format Highlight
ACTIVITYMENUFormatHighlight=Format highlight

# XTOL : Highlight Cells
ACTIVITYDESCHighlightCells=Highlight cells.

# XTIT : Format Highlight
ACTIVITYNAMEFormatHighlight=Format highlight

# XTIT : Highlight Color
PROPNAMEACTIVITYHighlightColor=Highlight color

# XTOL : The highlight color has to be selected thanks to ctx.word.constants.WdColorIndex enumeration. 
PROPDESCACTIVITYThehighlightcolorhastobeselectedthankstoctx.word.constants.WdColorIndexenumeration.=The highlight color must be selected based on ctx.word.constants.WdColorIndex enumeration.

# XMSG : ReplaceAll
ACTIVITYTITLEReplaceAll=Replace all.

# XMIT : ReplaceAll
ACTIVITYMENUReplaceAll=Replace all

# XTOL : Replace All
ACTIVITYDESCReplaceAll=Replace all.

# XTIT : ReplaceAll
ACTIVITYNAMEReplaceAll=Replace all

# XTIT : Text to find
PROPNAMEACTIVITYTexttofind=Text to find

# XTOL : The text that you want to find and then replace.
PROPDESCACTIVITYThetextthatyouwanttofindandthenreplace.=The text you want to find and replace.

# XTIT : Text to replace
PROPNAMEACTIVITYTexttoreplace=Text to replace

# XTOL : The text that you want to use to replace the former one.
PROPDESCACTIVITYThetextthatyouwanttousetoreplacetheformerone.=The text you want to replace the former one with.

# XTIT : advandedParameters
PROPNAMEACTIVITYadvandedParameters=Advanced parameters

# XTOL : Can be use to replace only one occurence, or to search with 'match case' or to search with 'match Whole Word'. To activate all advanced parameter, here is an example {"replacementType" : ctx.word.constants.WdReplace.wdReplaceOne, "matchCase" : true, "matchWholeWord" : true}
PROPDESCACTIVITYCanbeusetoreplaceonlyoneoccurence,ortosearchwith'matchcase'ortosearchwith'matchWholeWord'.Toactivatealladvancedparameter,hereisanexample{"replacementType"ctx.word.constants.WdReplace.wdReplaceOne,"matchCase"true,"matchWholeWord"true}=Can be use to replace a single occurrence, or to search with 'Match Case' or to search with 'Match Whole Word'. To activate all advanced parameter, here is an example {"replacementType" : ctx.word.constants.WdReplace.wdReplaceOne, "matchCase" : true, "matchWholeWord" : true}.

# XMSG : Get $nRows$ rows of values starting from $expression$ in $item$
ACTIVITYTITLEGet$nRows$rowsofvaluesstartingfrom$expression$in$item$=Get $nRows$ rows of values starting from $expression$ in $item$.

# XMIT : Get $nRows$ rows of values starting from $expression$ in $item$
ACTIVITYMENUGet$nRows$rowsofvaluesstartingfrom$expression$in$item$=Get $nRows$ rows of values starting from $expression$ in $item$

# XTOL : Get a set of rows in GUIGridViewPane
ACTIVITYDESCGetasetofrowsinGUIGridViewPane=Get a set of rows in GUIGridViewPane.

# XTIT : Get Rows
ACTIVITYNAMEGetRows=Get rows

# XTOL : Name of the item.
PROPDESCACTIVITYNameoftheitem.=Name of the item.

# XTIT : Start Row Index
PROPNAMEACTIVITYStartRowIndex=Start row index

# XTIT : Number of Rows
PROPNAMEACTIVITYNumberofRows=Number of rows

# XMSG : Get $nRows$ rows of values starting from $expression$ for column $colId$ in $item$
ACTIVITYTITLEGet$nRows$rowsofvaluesstartingfrom$expression$forcolumn$colId$in$item$=Get $nRows$ rows of values starting from $expression$ for column $colId$ in $item$.

# XMIT : Get $nRows$ rows of values starting from $expression$ for column $colId$ in $item$
ACTIVITYMENUGet$nRows$rowsofvaluesstartingfrom$expression$forcolumn$colId$in$item$=Get $nRows$ Rows of Values Starting from $expression$ for Column $colId$ in $item$

# XTOL : Get a set of rows for a column in GUIGridViewPane
ACTIVITYDESCGetasetofrowsforacolumninGUIGridViewPane=Get a set of rows for a column in GUIGridViewPane.

# XTIT : Get Rows By Column
ACTIVITYNAMEGetRowsByColumn=Get rows by column

# XTIT : Column Id
PROPNAMEACTIVITYColumnId=Column ID

# XMSG : Get all the visible rows of values in $item$
ACTIVITYTITLEGetallthevisiblerowsofvaluesin$item$=Get all the visible rows of values in $item$.

# XMIT : Get all the visible rows of values in $item$
ACTIVITYMENUGetallthevisiblerowsofvaluesin$item$=Get all visible rows of values in $item$

# XTOL : Gets all the visible rows in GUIGridViewPane
ACTIVITYDESCGetsallthevisiblerowsinGUIGridViewPane=Gets all the visible rows in GUIGridViewPane.

# XTIT : Get All Visible Rows
ACTIVITYNAMEGetAllVisibleRows=Get all visible rows 

# XMSG : Select row $expression$ in $item$
ACTIVITYTITLESelectrow$expression$in$item$=Select row $expression$ in $item$.

# XMIT : Select row $expression$ in $item$
ACTIVITYMENUSelectrow$expression$in$item$=Select row $expression$ in $item$

# XTOL : Selects the GUICtrlGridView Row
ACTIVITYDESCSelectstheGUICtrlGridViewRow=Selects the GUICtrlGridView row.

# XTIT : Select Row
ACTIVITYNAMESelectRow=Select row 

# XTOL : The highlight color has to be selected thanks to e.word.WdColorIndex enumeration. 
PROPDESCACTIVITYThehighlightcolorhastobeselectedthankstoe.word.WdColorIndexenumeration.=Select the highlight color based on the e.word.WdColorIndex enumeration. 

# XTOL : Can be use to replace only one occurrence, or to search with 'match case' or to search with 'match Whole Word'. To activate all advanced parameters, here is an example {"replacementType" : e.word.WdReplace.wdReplaceOne, "matchCase" : true, "matchWholeWord" : true}
PROPDESCACTIVITYCanbeusetoreplaceonlyoneoccurrence,ortosearchwith'matchcase'ortosearchwith'matchWholeWord'.Toactivatealladvancedparameters,hereisanexample{"replacementType"e.word.WdReplace.wdReplaceOne,"matchCase"true,"matchWholeWord"true}=Can be used to replace a single occurrence, or to search with 'match case', or to search with 'match Whole Word'. Here is an example for activating all advanced parameters: {"replacementType" : e.word.WdReplace.wdReplaceOne, "matchCase" : true, "matchWholeWord" : true}.

# XTIT : Formatting
ACTIVITYCATEGORYFormatting=Formatting

# XMSG : Open $item$
ACTIVITYTITLEOpen$item$=Open $item$.

# XMIT : Open $item$
ACTIVITYMENUOpen$item$=Open $item$

# XTOL : Open Menu
ACTIVITYDESCOpenMenu=Open the menu.

# XTIT : Open
ACTIVITYNAMEOpen=Open

# XTIT : SAPUI5
ACTIVITYCATEGORYSAPUI5=SAPUI5

# XTIT : Action Select
ACTIVITYCATEGORYActionSelect=Action Select

# XMSG : Add Credit $data$ in $item$
ACTIVITYTITLEAddCredit$data$in$item$=Add credit $data$ in $item$.

# XMIT : Add Credit $data$ in $item$
ACTIVITYMENUAddCredit$data$in$item$=Add credit $data$ in $item$

# XTOL : Add Credit Item content
ACTIVITYDESCAddCreditItemcontent=Add credit item content.

# XTIT : Add Credit
ACTIVITYNAMEAddCredit=Add credit 

# XTIT : TAccount
ACTIVITYCATEGORYTAccount=TAccount

# XTOL : You can :
PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantvaluebyusing'...'(ex'123')-Useavariablebyusing...(ex$data$++++)=You can:\n- Select or create an entry in the context\n- Use a constant value by using '...' (example: '123')\n- Use a variable by using _..._ (example: $data$ + +++)

# XMSG : Add Debit $data$ in $item$
ACTIVITYTITLEAddDebit$data$in$item$=Add debit $data$ in $item$.

# XMIT : Add Debit $data$ in $item$
ACTIVITYMENUAddDebit$data$in$item$=Add debit $data$ in $item$

# XTOL : Add Debit Item content
ACTIVITYDESCAddDebitItemcontent=Add debit item content.

# XTIT : Add Debit
ACTIVITYNAMEAddDebit=Add debit 

# XTOL : You can :
PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantvaluebyusing'...'(ex'123')-Useavariablebyusing...(ex$data$+++)=You can :\n- Select or create an entry in the context\n- Use a constant value by using '...' (example: '123')\n- Use a variable by using _..._ (example: $data$ + ++)

# XMSG : Check
ACTIVITYTITLECheck=Check.

# XMIT : Check
ACTIVITYMENUCheck=Check

# XTOL : Check ToggleButton
ACTIVITYDESCCheckToggleButton=Check the toggle button.

# XTIT : Check
ACTIVITYNAMECheck=Check

# XTIT : Toggle Button
ACTIVITYCATEGORYToggleButton=Toggle button

# XMSG : Clear Selection in $item$
ACTIVITYTITLEClearSelectionin$item$=Clear the selection in $item$.

# XMIT : Clear Selection in $item$
ACTIVITYMENUClearSelectionin$item$=Clear selection in $item$

# XTOL : Clear Selection in Table
ACTIVITYDESCClearSelectioninTable=Clear the selection in the table.

# XTIT : Clear Selection
ACTIVITYNAMEClearSelection=Clear selection 

# XTIT : Table
ACTIVITYCATEGORYTable=Table

# XMSG : Add $data$ in $item$
ACTIVITYTITLEAdd$data$in$item$=Add $data$ in $item$.

# XMIT : Add $data$ in $item$
ACTIVITYMENUAdd$data$in$item$=Add $data$ in $item$

# XTOL : Add Item
ACTIVITYDESCAddItem=Add item.

# XTIT : Add Item
ACTIVITYNAMEAddItem=Add item

# XTIT : Combobox
ACTIVITYCATEGORYCombobox=Combobox

# XTOL : You can :
PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantbyusing...(ex{text"toto",key"totoKey"})-Useavariablevaluebyusing'...'(ex$data$+'+++')=You can :\n- Select or create an entry in the context\n- Use a constant by using _..._ (example: {text: "toto", key:"totoKey"})\n- Use a variable value by using '...' (example: $data$ + '+++')

# XMSG : Get Items $item$ in $data$
ACTIVITYTITLEGetItems$item$in$data$=Get items $item$ in $data$.

# XMIT : Get Items $item$ in $data$
ACTIVITYMENUGetItems$item$in$data$=Get items $item$ in $data$

# XTIT : Get Items
ACTIVITYNAMEGetItems=Get items 

# XMSG : Expand $item$
ACTIVITYTITLEExpand$item$=Expand $item$.

# XMIT : Expand $item$
ACTIVITYMENUExpand$item$=Expand $item$

# XTOL : Expand Item content
ACTIVITYDESCExpandItemcontent=Expand the content of the item.

# XTIT : Expand
ACTIVITYNAMEExpand=Expand

# XTIT : Tree Grid
ACTIVITYCATEGORYTreeGrid=Tree Grid

# XTOL : This is an 'expression'. Use : 
PROPDESCACTIVITYThisisan'expression'.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex0)-...=This is an 'expression'. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 0)\n- ...\n

# XMSG : Filter in $item$
ACTIVITYTITLEFilterin$item$=Filter in $item$.

# XMIT : Filter in $item$
ACTIVITYMENUFilterin$item$=Filter in $item$

# XTOL : Filter Item content
ACTIVITYDESCFilterItemcontent=Filter the content of the item.

# XTIT : Filter
ACTIVITYNAMEFilter=Filter

# XMSG : Get Credit $data$ in $item$
ACTIVITYTITLEGetCredit$data$in$item$=Get credit $data$ in $item$.

# XMIT : Get Credit $data$ in $item$
ACTIVITYMENUGetCredit$data$in$item$=Get credit $data$ in $item$

# XTOL : Get Credit Item content
ACTIVITYDESCGetCreditItemcontent=Get the credit item's content.

# XTIT : Get Credit
ACTIVITYNAMEGetCredit=Get credit 

# XMSG : Get Debit $data$ in $item$
ACTIVITYTITLEGetDebit$data$in$item$=Get debit $data$ in $item$.

# XMIT : Get Debit $data$ in $item$
ACTIVITYMENUGetDebit$data$in$item$=Get debit $data$ in $item$

# XTOL : Get Debit Item content
ACTIVITYDESCGetDebitItemcontent=Get the content of the debit item.

# XTIT : Get Debit
ACTIVITYNAMEGetDebit=Get debit 

# XMSG : Get Region in $item$
ACTIVITYTITLEGetRegionin$item$=Get the region in $item$.

# XMIT : Get Region in $item$
ACTIVITYMENUGetRegionin$item$=Get region in $item$

# XTOL : Get Region content
ACTIVITYDESCGetRegioncontent=Get the region's content.

# XTIT : Get Region
ACTIVITYNAMEGetRegion=Get region 

# XTIT : Map
ACTIVITYCATEGORYMap=Map

# XMSG : Get Table Data '$item$'
ACTIVITYTITLEGetTableData'$item$'=Get the table data '$item$'.

# XMIT : Get Table Data '$item$'
ACTIVITYMENUGetTableData'$item$'=Get table data '$item$'

# XTOL : Get Table Data.
ACTIVITYDESCGetTableData.=Get the table data.

# XTIT : Table Data
ACTIVITYNAMETableData=Table data 

# XTOL : Name of the item to select
PROPDESCACTIVITYNameoftheitemtoselect=The name of the item to select.

# XMSG : Get Table Row Count in '$item$'
ACTIVITYTITLEGetTableRowCountin'$item$'=Get table row count in '$item$'.

# XMIT : Get Table Row Count in '$item$'
ACTIVITYMENUGetTableRowCountin'$item$'=Get table row count in '$item$'

# XTOL : Get Table Row Count.
ACTIVITYDESCGetTableRowCount.=Get the table row count.

# XTIT : Row Count
ACTIVITYNAMERowCount=Row count 

# XMSG : Get Table Row data in '$item$'
ACTIVITYTITLEGetTableRowdatain'$item$'=Get the table row data in '$item$'.

# XMIT : Get Table Row data in '$item$'
ACTIVITYMENUGetTableRowdatain'$item$'=Get table row data in '$item$'

# XTOL : Get Table Row Data By Index.
ACTIVITYDESCGetTableRowDataByIndex.=Get the table row data by index.

# XTIT : Row Data
ACTIVITYNAMERowData=Row data

# XTIT : Source Data
PROPNAMEACTIVITYSourceData=Source data

# XTOL : You can :
PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-UseaconstantRowNumberbyusing'...'(ex6)-Useavariablebyusing...(ex$data$++++)=You can :\n- Select or create an entry in the context\n- Use a constant row number by using '...' (example: 6)\n- Use a variable by using _..._ (example: $data$ + +++)

# XMSG : IsChecked
ACTIVITYTITLEIsChecked=Is checked

# XMIT : IsChecked
ACTIVITYMENUIsChecked=Is checked

# XTOL : Get ToggleButton
ACTIVITYDESCGetToggleButton=Get the toggle button.

# XTIT : IsChecked
ACTIVITYNAMEIsChecked=Is checked

# XTIT : Menu
ACTIVITYCATEGORYMenu=Menu

# XTIT : Navigation List
ACTIVITYCATEGORYNavigationList=Navigation List

# XMSG : Next
ACTIVITYTITLENext=Next

# XMIT : Next
ACTIVITYMENUNext=Next

# XTOL : Clicks Next on Carousal.
ACTIVITYDESCClicksNextonCarousal.=Clicks Next on the carousel.

# XTIT : Next
ACTIVITYNAMENext=Next

# XTIT : Carousal
ACTIVITYCATEGORYCarousal=Carousel

# XMSG : Press $item$
ACTIVITYTITLEPress$item$=Press $item$.

# XMIT : Press $item$
ACTIVITYMENUPress$item$=Press $item$

# XTOL : Press Item
ACTIVITYDESCPressItem=Press item.

# XTIT : Press
ACTIVITYNAMEPress=Press

# XTIT : Feed Content
ACTIVITYCATEGORYFeedContent=Feed Content

# XMSG : Previous
ACTIVITYTITLEPrevious=Previous

# XMIT : Previous
ACTIVITYMENUPrevious=Previous

# XTOL : Clicks Previous on Carousal.
ACTIVITYDESCClicksPreviousonCarousal.=Clicks Previous on the carousel.

# XTIT : Previous
ACTIVITYNAMEPrevious=Previous

# XMSG : Search $data$ in $item$
ACTIVITYTITLESearch$data$in$item$=Search $data$ in $item$.

# XMIT : Search $data$ in $item$
ACTIVITYMENUSearch$data$in$item$=Search $data$ in $item$

# XTIT : Segment Button
ACTIVITYCATEGORYSegmentButton=Segment Button

# XMSG : Select All in '$item$'
ACTIVITYTITLESelectAllin'$item$'=Select all in '$item$'.

# XMIT : Select All in '$item$'
ACTIVITYMENUSelectAllin'$item$'=Select all in '$item$'

# XTOL : Select All Content of a Table.
ACTIVITYDESCSelectAllContentofaTable.=Select all the contents of a table.

# XTIT : Select All
ACTIVITYNAMESelectAll=Select all 

# XMSG : Select row in '$item$'
ACTIVITYTITLESelectrowin'$item$'=Select row in '$item$'.

# XMIT : Select row in '$item$'
ACTIVITYMENUSelectrowin'$item$'=Select row in '$item$'

# XTOL : Select the row of a Table.
ACTIVITYDESCSelecttherowofaTable.=Select the row of a table.

# XTOL : Index of the row to select.
PROPDESCACTIVITYIndexoftherowtoselect.=The index of the row to select.

# XTOL : This is an 'expression'. Use : 
PROPDESCACTIVITYThisisan'expression'.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex1)-...=This is an 'expression'. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 1)\n- ...\n

# XTOL : Search Item content
ACTIVITYDESCSearchItemcontent=Search item content.

# XTIT : Suggestion Search
ACTIVITYNAMESuggestionSearch=Suggestion Search

# XTIT : Suggestion Search Field
ACTIVITYCATEGORYSuggestionSearchField=Suggestion Search Field

# XMSG : Uncheck
ACTIVITYTITLEUncheck=Uncheck

# XMIT : Uncheck
ACTIVITYMENUUncheck=Uncheck

# XTOL : Uncheck ToggleButton
ACTIVITYDESCUncheckToggleButton=Uncheck the toggle button.

# XTIT : UnCheck
ACTIVITYNAMEUnCheck=Uncheck

# XMSG : Get selected date in $item$
ACTIVITYTITLEGetselecteddatein$item$=Get selected date from $item$.

# XMIT : Get selected date in $item$
ACTIVITYMENUGetselecteddatein$item$=Get selected date from $item$.

# XTOL : Returns selected date in "YYYYMMDD" format.
ACTIVITYDESCReturnsselecteddatein"YYYYMMDD"format.=Returns selected date in "YYYYMMDD" format.

# XTIT : Get Date
ACTIVITYNAMEGetDate=Get date

# XTIT : GuiCtrlCalendar
ACTIVITYCATEGORYGuiCtrlCalendar=GuiCtrlCalendar

# XMSG : Get selected date range in $item$
ACTIVITYTITLEGetselecteddaterangein$item$=Get selected date range from $item$.

# XMIT : Get selected date range in $item$
ACTIVITYMENUGetselecteddaterangein$item$=Get selected date range from $item$.

# XTOL : Returns selected date range in "YYYYMMDD" format split by comma.
ACTIVITYDESCReturnsselecteddaterangein"YYYYMMDD"formatsplitbycomma.=Returns selected date range in "YYYYMMDD" format, with comma separator.

# XTIT : Get Date Range
ACTIVITYNAMEGetDateRange=Get date range

# XMSG : Select date in $item$
ACTIVITYTITLESelectdatein$item$=Select date in $item$

# XMIT : Select date in $item$
ACTIVITYMENUSelectdatein$item$=Select date in $item$

# XTOL : Selects date given in "YYYYMMDD" format.
ACTIVITYDESCSelectsdategivenin"YYYYMMDD"format.=Selects date expressed in "YYYYMMDD" format.

# XTIT : Select Date
ACTIVITYNAMESelectDate=Select date

# XTIT : Date
PROPNAMEACTIVITYDate=Date

# XTOL : Enter date in "YYYYMMDD" format.
PROPDESCACTIVITYEnterdatein"YYYYMMDD"format.=Enter date in "YYYYMMDD" format.

# XMSG : Select date range in $item$
ACTIVITYTITLESelectdaterangein$item$=Select date range in $item$.

# XMIT : Select date range in $item$
ACTIVITYMENUSelectdaterangein$item$=Select date range in $item$

# XTOL : Selects date range given in "YYYYMMDD" format.
ACTIVITYDESCSelectsdaterangegivenin"YYYYMMDD"format.=Selects date range given in "YYYYMMDD" format.

# XTIT : Select Date Range
ACTIVITYNAMESelectDateRange=Select date range

# XTIT : From Date
PROPNAMEACTIVITYFromDate=From date

# XTOL : Enter "From Date" in "YYYYMMDD" format.
PROPDESCACTIVITYEnter"FromDate"in"YYYYMMDD"format.=Enter the From date in "YYYYMMDD" format.

# XTIT : To Date
PROPNAMEACTIVITYToDate=To date

# XTOL : Enter "To Date" in "YYYYMMDD" format.
PROPDESCACTIVITYEnter"ToDate"in"YYYYMMDD"format.=Enter the To date in "YYYYMMDD" format.

# XTIT : GuiGridView
ACTIVITYCATEGORYGuiGridView=GuiGridView

# XMSG : Get data from row $expression$ in $item$
ACTIVITYTITLEGetdatafromrow$expression$in$item$=Get data from row $expression$ in $item$

# XMIT : Get data from row $expression$ in $item$
ACTIVITYMENUGetdatafromrow$expression$in$item$=Get data from GUICtrlGridView row $expression$ in $item$.

# XTOL : Get data from a table row
ACTIVITYDESCGetdatafromatablerow=Get data from a table row.

# XTOL : Gets all the visible rows present in a table
ACTIVITYDESCGetsallthevisiblerowspresentinatable=Gets all the visible rows present in a table.

# XMSG : Create session on $page$
ACTIVITYTITLECreatesessionon$page$=Create session on $page$.

# XMIT : Create session on $page$
ACTIVITYMENUCreatesessionon$page$=Create session on $page$

# XTOL : Creates a new session, which is then visualized by a new main window.
ACTIVITYDESCCreatesanewsession,whichisthenvisualizedbyanewmainwindow.=Creates a new session, which is then visualized by a new main window.

# XTIT : Create Session
ACTIVITYNAMECreateSession=Create session

# XTIT : GuiSession
ACTIVITYCATEGORYGuiSession=GuiSession

# XTOL : Name of the page to create a new session.
PROPDESCACTIVITYNameofthepagetocreateanewsession.=Name of the page to create a new session for.

# XMSG : End transaction on $page$
ACTIVITYTITLEEndtransactionon$page$=End transaction on $page$.

# XMIT : End transaction on $page$
ACTIVITYMENUEndtransactionon$page$=End transaction on $page$

# XTOL : End transaction on page
ACTIVITYDESCEndtransactiononpage=End transaction on page.

# XTIT : End Transaction
ACTIVITYNAMEEndTransaction=End transaction

# XTOL : Name of the page to end transaction.
PROPDESCACTIVITYNameofthepagetoendtransaction.=Name of the page to end transaction for.

# XMSG : Start transaction on $page$
ACTIVITYTITLEStarttransactionon$page$=Start transaction on $page$.

# XMIT : Start transaction on $page$
ACTIVITYMENUStarttransactionon$page$=Start transaction on $page$

# XTOL : Start transaction on page
ACTIVITYDESCStarttransactiononpage=Start transaction on page

# XTIT : Start Transaction
ACTIVITYNAMEStartTransaction=Start transaction

# XTOL : Name of the page to start transaction.
PROPDESCACTIVITYNameofthepagetostarttransaction.=Name of the page to start transaction for.

# XTIT : Transaction id
PROPNAMEACTIVITYTransactionid=Transaction ID

# XMSG : Gets Application Server from SessionInfo in $page$
ACTIVITYTITLEGetsApplicationServerfromSessionInfoin$page$=Gets the application server from SessionInfo in $page$.

# XMIT : Gets Application Server from SessionInfo in $page$
ACTIVITYMENUGetsApplicationServerfromSessionInfoin$page$=Gets application server from SessionInfo in $page$

# XTOL : Returns Application Server from SessionInfo.
ACTIVITYDESCReturnsApplicationServerfromSessionInfo.=Returns the application server from SessionInfo.

# XTIT : Get Application Server
ACTIVITYNAMEGetApplicationServer=Get application server

# XTOL : Name of the page.
PROPDESCACTIVITYNameofthepage.=Name of the page.

# XMSG : Gets Client Name from SessionInfo in $page$
ACTIVITYTITLEGetsClientNamefromSessionInfoin$page$=Gets client name from SessionInfo in $page$

# XMIT : Gets Client Name from SessionInfo in $page$
ACTIVITYMENUGetsClientNamefromSessionInfoin$page$=Gets client name from SessionInfo in $page$

# XTOL : Returns Client from SessionInfo.
ACTIVITYDESCReturnsClientfromSessionInfo.=Returns client from SessionInfo.

# XTIT : Get Client Name
ACTIVITYNAMEGetClientName=Get client name

# XMSG : Gets Program from SessionInfo in $page$
ACTIVITYTITLEGetsProgramfromSessionInfoin$page$=Gets program from SessionInfo in $page$

# XMIT : Gets Program from SessionInfo in $page$
ACTIVITYMENUGetsProgramfromSessionInfoin$page$=Gets program from SessionInfo in $page$

# XTOL : Returns Program from SessionInfo.
ACTIVITYDESCReturnsProgramfromSessionInfo.=Returns program from SessionInfo.

# XTIT : Get Program
ACTIVITYNAMEGetProgram=Get program

# XMSG : Gets Screen Number from SessionInfo in $page$
ACTIVITYTITLEGetsScreenNumberfromSessionInfoin$page$=Gets screen number from SessionInfo in $page$

# XMIT : Gets Screen Number from SessionInfo in $page$
ACTIVITYMENUGetsScreenNumberfromSessionInfoin$page$=Gets screen number from SessionInfo in $page$

# XTOL : Returns Screen Number from SessionInfo.
ACTIVITYDESCReturnsScreenNumberfromSessionInfo.=Returns screen number from SessionInfo.

# XTIT : Get Screen Number
ACTIVITYNAMEGetScreenNumber=Get screen number

# XMSG : Gets Session Number from SessionInfo in $page$
ACTIVITYTITLEGetsSessionNumberfromSessionInfoin$page$=Gets session number from SessionInfo in $page$

# XMIT : Gets Session Number from SessionInfo in $page$
ACTIVITYMENUGetsSessionNumberfromSessionInfoin$page$=Gets session number from SessionInfo in $page$

# XTOL : Returns Session Number from SessionInfo.
ACTIVITYDESCReturnsSessionNumberfromSessionInfo.=Returns session number from SessionInfo.

# XTIT : Get Session Number
ACTIVITYNAMEGetSessionNumber=Get session number

# XMSG : Gets System Name from SessionInfo in $page$
ACTIVITYTITLEGetsSystemNamefromSessionInfoin$page$=Gets system name from SessionInfo in $page$

# XMIT : Gets System Name from SessionInfo in $page$
ACTIVITYMENUGetsSystemNamefromSessionInfoin$page$=Gets system name from SessionInfo in $page$

# XTOL : Returns System Name from SessionInfo.
ACTIVITYDESCReturnsSystemNamefromSessionInfo.=Returns system name from SessionInfo.

# XTIT : Get System Name
ACTIVITYNAMEGetSystemName=Get system name

# XMSG : Gets System Number from SessionInfo in $page$
ACTIVITYTITLEGetsSystemNumberfromSessionInfoin$page$=Gets system number from SessionInfo in $page$

# XMIT : Gets System Number from SessionInfo in $page$
ACTIVITYMENUGetsSystemNumberfromSessionInfoin$page$=Gets system number from SessionInfo in $page$

# XTOL : Returns System Number from SessionInfo.
ACTIVITYDESCReturnsSystemNumberfromSessionInfo.=Returns system number from SessionInfo.

# XTIT : Get System Number
ACTIVITYNAMEGetSystemNumber=Get system number

# XMSG : Gets Transaction from SessionInfo in $page$
ACTIVITYTITLEGetsTransactionfromSessionInfoin$page$=Gets transaction from SessionInfo in $page$

# XMIT : Gets Transaction from SessionInfo in $page$
ACTIVITYMENUGetsTransactionfromSessionInfoin$page$=Gets transaction from SessionInfo in $page$

# XTOL : Returns Transaction from SessionInfo.
ACTIVITYDESCReturnsTransactionfromSessionInfo.=Returns transaction from SessionInfo.

# XTIT : Get Transaction
ACTIVITYNAMEGetTransaction=Get transaction

# XMSG : Gets User Name from SessionInfo in $page$
ACTIVITYTITLEGetsUserNamefromSessionInfoin$page$=Gets user name from SessionInfo in $page$

# XMIT : Gets User Name from SessionInfo in $page$
ACTIVITYMENUGetsUserNamefromSessionInfoin$page$=Gets user name from SessionInfo in $page$

# XTOL : Returns User Name from SessionInfo.
ACTIVITYDESCReturnsUserNamefromSessionInfo.=Returns user name from SessionInfo.

# XTIT : Get User Name
ACTIVITYNAMEGetUserName=Get user name

# XMSG : Get message ID from $item$
ACTIVITYTITLEGetmessageIDfrom$item$=Get message ID from $item$

# XMIT : Get message ID from $item$
ACTIVITYMENUGetmessageIDfrom$item$=Get message ID from $item$

# XTOL : Gets the name of the message class used in the ABAP message call.
ACTIVITYDESCGetsthenameofthemessageclassusedintheABAPmessagecall.=Gets the name of the message class used in the ABAP message call.

# XTIT : Get Message ID
ACTIVITYNAMEGetMessageID=Get message ID

# XTIT : GuiStatusBar
ACTIVITYCATEGORYGuiStatusBar=GuiStatusBar

# XMSG : Get message number from $item$
ACTIVITYTITLEGetmessagenumberfrom$item$=Get message number from $item$

# XMIT : Get message number from $item$
ACTIVITYMENUGetmessagenumberfrom$item$=Get message number from $item$

# XTOL : Gets the name of the message number used in the ABAP message call. It will usually be a number, but this is not enforced by the system.
ACTIVITYDESCGetsthenameofthemessagenumberusedintheABAPmessagecall.Itwillusuallybeanumber,butthisisnotenforcedbythesystem.=Gets the name of the message class used in the ABAP message call. It will usually be a number, but this is not enforced by the system.

# XTIT : Get Message Number
ACTIVITYNAMEGetMessageNumber=Get message number

# XMSG : Get message type from $item$
ACTIVITYTITLEGetmessagetypefrom$item$=Get message type from $item$

# XMIT : Get message type from $item$
ACTIVITYMENUGetmessagetypefrom$item$=Get message type from $item$

# XTOL : Gets message type i.e Success, Warning, Error, Abort or Information
ACTIVITYDESCGetsmessagetypei.eSuccess,Warning,Error,AbortorInformation=Gets message type i.e Success, Warning, Error, Abort or Information

# XTIT : Get Message Type
ACTIVITYNAMEGetMessageType=Get message type

# XMSG : Deselect all Visible rows in $item$
ACTIVITYTITLEDeselectallVisiblerowsin$item$=Deselect all visible rows in $item$

# XMIT : Deselect all Visible rows in $item$
ACTIVITYMENUDeselectallVisiblerowsin$item$=Deselect all visible rows in $item$

# XTOL : Deselect all visible rows
ACTIVITYDESCDeselectallvisiblerows=Deselect all visible rows

# XTIT : Deselect all visible Rows
ACTIVITYNAMEDeselectallvisibleRows=Deselect all visible rows

# XTIT : GuiTableControl
ACTIVITYCATEGORYGuiTableControl=GuiTableControl

# XMSG : Deselect row $expression$ in $item$
ACTIVITYTITLEDeselectrow$expression$in$item$=Deselect row $expression$ in $item$

# XMIT : Deselect row $expression$ in $item$
ACTIVITYMENUDeselectrow$expression$in$item$=Deselect row $expression$ in $item$

# XTOL : Deselect a row given absolute row number value
ACTIVITYDESCDeselectarowgivenabsoluterownumbervalue=Deselect a row given the absolute row number value

# XTIT : Deselect a given Row
ACTIVITYNAMEDeselectagivenRow=Deselect a given row

# XMSG : Deselect visible row $expression$ in $item$
ACTIVITYTITLEDeselectvisiblerow$expression$in$item$=Deselect visible row $expression$ in $item$

# XMIT : Deselect visible row $expression$ in $item$
ACTIVITYMENUDeselectvisiblerow$expression$in$item$=Deselect visible row $expression$ in $item$

# XTOL : Deselect a visible row, row numbers can be from 0 to visibleRowCount - 1
ACTIVITYDESCDeselectavisiblerow,rownumberscanbefrom0tovisibleRowCount-1=Deselect a visible row. Row numbers can be from 0 to visibleRowCount - 1

# XTIT : Deselect visible Row
ACTIVITYNAMEDeselectvisibleRow=Deselect visible row

# XMSG : Get column names from $item$
ACTIVITYTITLEGetcolumnnamesfrom$item$=Get column names from $item$

# XMIT : Get column names from $item$
ACTIVITYMENUGetcolumnnamesfrom$item$=Get column names from $item$

# XTOL : Gets all the column names present in GuiTableControl component
ACTIVITYDESCGetsallthecolumnnamespresentinGuiTableControlcomponent=Gets all the column names present in the GuiTableControl component

# XTIT : Get Column Names
ACTIVITYNAMEGetColumnNames=Get column names

# XMSG : Get visible row count in $item$
ACTIVITYTITLEGetvisiblerowcountin$item$=Get visible row count in $item$

# XMIT : Get visible row count in $item$
ACTIVITYMENUGetvisiblerowcountin$item$=Get visible row count in $item$

# XTOL : Gets visible row count in a table
ACTIVITYDESCGetsvisiblerowcountinatable=Gets visible row count in a table

# XTIT : Get Visible row count
ACTIVITYNAMEGetVisiblerowcount=Get visible row count

# XMSG : Scroll to next set of rows in $item$
ACTIVITYTITLEScrolltonextsetofrowsin$item$=Scroll to next set of rows in $item$

# XMIT : Scroll to next set of rows in $item$
ACTIVITYMENUScrolltonextsetofrowsin$item$=Scroll to next set of rows in $item$

# XTOL : Scroll to next page in GuiTableControl
ACTIVITYDESCScrolltonextpageinGuiTableControl=Scroll to next page in GuiTableControl

# XTIT : Scroll to next page
ACTIVITYNAMEScrolltonextpage=Scroll to next page

# XTOL : Name of the item to perform scroll operation.
PROPDESCACTIVITYNameoftheitemtoperformscrolloperation.=Name of the item to perform scroll operation on.

# XMSG : Scroll to previous set of rows in $item$
ACTIVITYTITLEScrolltoprevioussetofrowsin$item$=Scroll to previous set of rows in $item$

# XMIT : Scroll to previous set of rows in $item$
ACTIVITYMENUScrolltoprevioussetofrowsin$item$=Scroll to previous set of rows in $item$

# XTOL : Scroll to previous page in GuiTableControl
ACTIVITYDESCScrolltopreviouspageinGuiTableControl=Scroll to previous page in GuiTableControl

# XTIT : Scroll to previous page
ACTIVITYNAMEScrolltopreviouspage=Scroll to previous page

# XMSG : Select All visible rows in $item$
ACTIVITYTITLESelectAllvisiblerowsin$item$=Select all visible rows in $item$

# XMIT : Select All visible rows in $item$
ACTIVITYMENUSelectAllvisiblerowsin$item$=Select all visible rows in $item$

# XTOL : Select all visible rows
ACTIVITYDESCSelectallvisiblerows=Select all visible rows

# XTIT : Select all visible Rows
ACTIVITYNAMESelectallvisibleRows=Select all visible rows

# XTOL : Select a row given absolute row number value
ACTIVITYDESCSelectarowgivenabsoluterownumbervalue=Select a row given the absolute row number value

# XTIT : Select a given Row
ACTIVITYNAMESelectagivenRow=Select a given row

# XMSG : Select visible row $expression$ in $item$
ACTIVITYTITLESelectvisiblerow$expression$in$item$=Select visible row $expression$ in $item$

# XMIT : Select visible row $expression$ in $item$
ACTIVITYMENUSelectvisiblerow$expression$in$item$=Select visible row $expression$ in $item$

# XTOL : Select a visible row, row numbers can be from 0 to visibleRowCount - 1
ACTIVITYDESCSelectavisiblerow,rownumberscanbefrom0tovisibleRowCount-1=Select a visible row. Row numbers can be from 0 to visibleRowCount - 1

# XTIT : Select a visible Row
ACTIVITYNAMESelectavisibleRow=Select a visible row

# XMSG : Check the CheckBox Item in position $pos$ of node $expression$ in $item$
ACTIVITYTITLEChecktheCheckBoxIteminposition$pos$ofnode$expression$in$item$=Check the checkbox item in position $pos$ of node $expression$ in $item$.

# XMIT : Check the CheckBox Item in position $pos$ of node $expression$ in $item$
ACTIVITYMENUChecktheCheckBoxIteminposition$pos$ofnode$expression$in$item$=Check the checkbix item in position $pos$ of node $expression$ in $item$

# XTOL : Sets the checkbox node item's status to true in GUI Column Tree
ACTIVITYDESCSetsthecheckboxnodeitem'sstatustotrueinGUIColumnTree=Sets the checkbox node item's status to true in GUI Column Tree.

# XTIT : GuiTree
ACTIVITYCATEGORYGuiTree=GuiTree

# XTIT : Node Key
PROPNAMEACTIVITYNodeKey=Node key

# XTIT : Item Position(Column)
PROPNAMEACTIVITYItemPosition(Column)=Item position(column)

# XMSG : Double click node of key $expression$ in $item$
ACTIVITYTITLEDoubleclicknodeofkey$expression$in$item$=Double click node of key $expression$ in $item$.

# XMIT : Double click node of key $expression$ in $item$
ACTIVITYMENUDoubleclicknodeofkey$expression$in$item$=Double click node of key $expression$ in $item$.

# XTOL : Double Click the node using key provided
ACTIVITYDESCDoubleClickthenodeusingkeyprovided=Double-click the node using the key provided.

# XTIT : DoubleClick node
ACTIVITYNAMEDoubleClicknode=Double-click node

# XMSG : Click item link in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEClickitemlinkinposition$pos$ofnode$nodeKey$in$item$=Click item link in position $pos$ of node $nodeKey$ in $item$

# XMIT : Click item link in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUClickitemlinkinposition$pos$ofnode$nodeKey$in$item$=Click item link in position $pos$ of node $nodeKey$ in $item$
# XTOL : Click item link of a node in GUI Column Tree
ACTIVITYDESCClickitemlinkofanodeinGUIColumnTree=Click item link of a node in GUI Column Tree

# XTIT : Click Node Item Link
ACTIVITYNAMEClickNodeItemLink=Click node item link

# XMSG : Collapse node of key $expression$ in $item$
ACTIVITYTITLECollapsenodeofkey$expression$in$item$=Collapse node of key $expression$ in $item$

# XMIT : Collapse node of key $expression$ in $item$
ACTIVITYMENUCollapsenodeofkey$expression$in$item$=Collapse node of key $expression$ in $item$

# XTOL : Collapse the node using key provided
ACTIVITYDESCCollapsethenodeusingkeyprovided=Collapse the node using the key provided

# XTIT : Collapse node
ACTIVITYNAMECollapsenode=Collapse node

# XMSG : Double Click Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEDoubleClickIteminposition$pos$ofnode$nodeKey$in$item$=Double-click item in position $pos$ of node $nodeKey$ in $item$

# XMIT : Double Click Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUDoubleClickIteminposition$pos$ofnode$nodeKey$in$item$=Double-click item in position $pos$ of node $nodeKey$ in $item$

# XTOL : Double click item of a node in GUI Column Tree
ACTIVITYDESCDoubleclickitemofanodeinGUIColumnTree=Double-click item of a node in GUI Column Tree

# XTIT : Double Click Node Item
ACTIVITYNAMEDoubleClickNodeItem=Double-click node item

# XMSG : Expand node of key $expression$ in $item$
ACTIVITYTITLEExpandnodeofkey$expression$in$item$=Expand node of key $expression$ in $item$

# XMIT : Expand node of key $expression$ in $item$
ACTIVITYMENUExpandnodeofkey$expression$in$item$=Expand node of key $expression$ in $item$

# XTOL : Expands the node using key provided
ACTIVITYDESCExpandsthenodeusingkeyprovided=Expands the node using the key provided

# XTIT : Expand node
ACTIVITYNAMEExpandnode=Expand node

# XMSG : Get Item text in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEGetItemtextinposition$pos$ofnode$nodeKey$in$item$=Get item text in position $pos$ of node $nodeKey$ in $item$

# XMIT : Get Item text in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUGetItemtextinposition$pos$ofnode$nodeKey$in$item$=Get item text in position $pos$ of node $nodeKey$ in $item$

# XTOL : Get item's text of a node in GUI Column Tree
ACTIVITYDESCGetitem'stextofanodeinGUIColumnTree=Get item's text of a node in GUI Column Tree

# XTIT : Get Node Item Text
ACTIVITYNAMEGetNodeItemText=Get node item text

# XMSG : Get Node key of path $nodePath$ in $item$
ACTIVITYTITLEGetNodekeyofpath$nodePath$in$item$=Get node key of path $nodePath$ in $item$

# XMIT : Get Node key of path $nodePath$ in $item$
ACTIVITYMENUGetNodekeyofpath$nodePath$in$item$=Get node key of path $nodePath$ in $item$

# XTOL : Get the node key using node's path
ACTIVITYDESCGetthenodekeyusingnode'spath=Get the node key using the node's path

# XTIT : Get Node Key by Path
ACTIVITYNAMEGetNodeKeybyPath=Get node key by path

# XTIT : Node Path
PROPNAMEACTIVITYNodePath=Node path

# XMSG : Get Node key of text $nodeText$ in $item$
ACTIVITYTITLEGetNodekeyoftext$nodeText$in$item$=Get node key of text $nodeText$ in $item$

# XMIT : Get Node key of text $nodeText$ in $item$
ACTIVITYMENUGetNodekeyoftext$nodeText$in$item$=Get node key of text $nodeText$ in $item$

# XTOL : Get the node key using node's text
ACTIVITYDESCGetthenodekeyusingnode'stext=Get the node key using node's text

# XTIT : Get Node Key by Text
ACTIVITYNAMEGetNodeKeybyText=Get node Key by text

# XTIT : Node Text
PROPNAMEACTIVITYNodeText=Node text

# XMSG : Get Checkbox state of item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEGetCheckboxstateofiteminposition$pos$ofnode$nodeKey$in$item$=Get checkbox state of item in position $pos$ of node $nodeKey$ in $item$

# XMIT : Get Checkbox state of item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUGetCheckboxstateofiteminposition$pos$ofnode$nodeKey$in$item$=Get checkbox state of item in position $pos$ of node $nodeKey$ in $item$

# XTOL : Get checkbox item state of a node in GUI Column Tree
ACTIVITYDESCGetcheckboxitemstateofanodeinGUIColumnTree=Get checkbox item state of a node in GUI Column Tree

# XTIT : Get Node Item Checkbox State
ACTIVITYNAMEGetNodeItemCheckboxState=Get node item checkbox state

# XMSG : Press Item Button in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEPressItemButtoninposition$pos$ofnode$nodeKey$in$item$=Press item button in position $pos$ of node $nodeKey$ in $item$

# XMIT : Press Item Button in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUPressItemButtoninposition$pos$ofnode$nodeKey$in$item$=Press item button in position $pos$ of node $nodeKey$ in $item$

# XTOL : Press item button of a node in GUI Column Tree
ACTIVITYDESCPressitembuttonofanodeinGUIColumnTree=Press item button of a node in GUI Column Tree

# XTIT : Press Node Item Button
ACTIVITYNAMEPressNodeItemButton=Press node item button

# XMSG : Select node of key $expression$ in $item$
ACTIVITYTITLESelectnodeofkey$expression$in$item$=Select node of key $expression$ in $item$

# XMIT : Select node of key $expression$ in $item$
ACTIVITYMENUSelectnodeofkey$expression$in$item$=Select node of key $expression$ in $item$

# XTOL : Selects the node using key provided
ACTIVITYDESCSelectsthenodeusingkeyprovided=Selects the node using key provided

# XTIT : Select node
ACTIVITYNAMESelectnode=Select node

# XTIT : Select/Unselect (true/false)
PROPNAMEACTIVITYSelect/Unselect(true/false)=Select/unselect (true/false)

# XMSG : Select Context Menu Item in position $position$ of node $nodeKey$ in $item$
ACTIVITYTITLESelectContextMenuIteminposition$position$ofnode$nodeKey$in$item$=Select context menu item in position $position$ of node $nodeKey$ in $item$

# XMIT : Select Context Menu Item in position $position$ of node $nodeKey$ in $item$
ACTIVITYMENUSelectContextMenuIteminposition$position$ofnode$nodeKey$in$item$=Select context menu item in position $position$ of node $nodeKey$ in $item$

# XTOL : Select context menu item of a node by position
ACTIVITYDESCSelectcontextmenuitemofanodebyposition=Select context menu item of a node by position

# XTIT : Select Context Menu Item by Position
ACTIVITYNAMESelectContextMenuItembyPosition=Select context menu item by position

# XTIT : MenuItem Position
PROPNAMEACTIVITYMenuItemPosition=Menu item position

# XTIT : Column Position
PROPNAMEACTIVITYColumnPosition=Column position

# XMSG : Select Context Menu Item with text $text$ of node $nodeKey$ in $item$
ACTIVITYTITLESelectContextMenuItemwithtext$text$ofnode$nodeKey$in$item$=Select context menu item with text $text$ of node $nodeKey$ in $item$

# XMIT : Select Context Menu Item with text $text$ of node $nodeKey$ in $item$
ACTIVITYMENUSelectContextMenuItemwithtext$text$ofnode$nodeKey$in$item$=Select context menu item with text $text$ of node $nodeKey$ in $item$

# XTOL : Select context menu item of a node by text
ACTIVITYDESCSelectcontextmenuitemofanodebytext=Select context menu item of a node by text

# XTIT : Select Context Menu Item by Text
ACTIVITYNAMESelectContextMenuItembyText=Select context menu item by text

# XTIT : MenuItem Text
PROPNAMEACTIVITYMenuItemText=Menu item text

# XMSG : Get the selected node in $item$
ACTIVITYTITLEGettheselectednodein$item$=Get the selected node in $item$

# XMIT : Get the selected node in $item$
ACTIVITYMENUGettheselectednodein$item$=Get the selected node in $item$

# XTOL : Get the selected node key
ACTIVITYDESCGettheselectednodekey=Get the selected node key

# XTIT : Get Selected Node
ACTIVITYNAMEGetSelectedNode=Get selected node

# XMSG : Select Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLESelectIteminposition$pos$ofnode$nodeKey$in$item$=Select item in position $pos$ of node $nodeKey$ in $item$

# XMIT : Select Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUSelectIteminposition$pos$ofnode$nodeKey$in$item$=Select item in position $pos$ of node $nodeKey$ in $item$

# XTOL : Select item of a node in GUI Column Tree
ACTIVITYDESCSelectitemofanodeinGUIColumnTree=Select item of a node in GUI Column Tree

# XTIT : Select Node Item
ACTIVITYNAMESelectNodeItem=Select node item

# XMSG : UnCheck the CheckBox Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEUnChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Uncheck the checkbox item in position $pos$ of node $nodeKey$ in $item$

# XMIT : UnCheck the CheckBox Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUUnChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Uncheck the checkbox item  in position $pos$ of node $nodeKey$ in $item$

# XMSG : Check the CheckBox Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYTITLEChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Check the checkbox item in position $pos$ of node $nodeKey$ in $item$

# XMIT : Check the CheckBox Item in position $pos$ of node $nodeKey$ in $item$
ACTIVITYMENUChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Check the checkbox item in position $pos$ of node $nodeKey$ in $item$

# XTOL : Sets the checkbox node item's status to false in GUI Column Tree
ACTIVITYDESCSetsthecheckboxnodeitem'sstatustofalseinGUIColumnTree=Sets the checkbox node item's status to false in GUI Column Tree

# XTIT : Where to Store Result
PROPNAMEACTIVITYWheretoStoreResult=Where to store result

# XTOL : This is an 'expression'. Use -
PROPDESCACTIVITYThisisan'expression'.Use--$data$tostoreinthecontext(Ex$data$+'+++')-variablenametostoreinavariable(ExvarmyVar)-...=This is an 'expression'. Use -\n- $data$ to store in the context (example: $data$ + '+++')\n- variable name to store in a variable (example: var myVar)\n- 

# XTOL : This is an 'expression'. Use -
PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex'myValue')-...=This is an 'expression'. Use -\n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 'myValue')\n- ...

# XMSG : Set Automation Connection on '$page$'
ACTIVITYTITLESetAutomationConnectionon'$page$'=Set automation connection on '$page$'

# XMIT : Set Automation Connection on '$page$'
ACTIVITYMENUSetAutomationConnectionon'$page$'=Set automation connection on '$page$'

# XTOL : Set Automation Connection on page
ACTIVITYDESCSetAutomationConnectiononpage=Set automation connection on page

# XTIT : Set Automation Connection
ACTIVITYNAMESetAutomationConnection=Set automation connection

# XTIT : GuiMainWindow
ACTIVITYCATEGORYGuiMainWindow=GuiMainWindow

# XTOL : Name of the page to set automation connection.
PROPDESCACTIVITYNameofthepagetosetautomationconnection.=Name of the page to set automation connection on.

# XMSG : Maximize '$page$'
ACTIVITYTITLEMaximize'$page$'=Maximize '$page$'.

# XMIT : Maximize '$page$'
ACTIVITYMENUMaximize'$page$'=Maximize '$page$'

# XTOL : Maximize
ACTIVITYDESCMaximize=Maximize

# XTIT : Maximize Page
ACTIVITYNAMEMaximizePage=Maximize page

# XMSG : Minimize '$page$'
ACTIVITYTITLEMinimize'$page$'=Minimize '$page$'

# XMIT : Minimize '$page$'
ACTIVITYMENUMinimize'$page$'=Minimize '$page$'

# XTOL : Minimize
ACTIVITYDESCMinimize=Minimize

# XTIT : Minimize Page
ACTIVITYNAMEMinimizePage=Minimize page

# XMSG : Restore '$page$'
ACTIVITYTITLERestore'$page$'=Restore '$page$'

# XMIT : Restore '$page$'
ACTIVITYMENURestore'$page$'=Restore '$page$'

# XTOL : Restore
ACTIVITYDESCRestore=Restore

# XTIT : Restore Page
ACTIVITYNAMERestorePage=Restore page

# XMSG : Gets maximum vertical scroll offset in '$item$'
ACTIVITYTITLEGetsmaximumverticalscrolloffsetin'$item$'=Gets maximum vertical scroll offset in '$item$'

# XMIT : Gets maximum vertical scroll offset in '$item$'
ACTIVITYMENUGetsmaximumverticalscrolloffsetin'$item$'=Gets maximum vertical scroll offset in '$item$'

# XTOL : Gets maximum vertical scroll offset in a GuiTableControl
ACTIVITYDESCGetsmaximumverticalscrolloffsetinaGuiTableControl=Gets maximum vertical scroll offset in a GuiTableControl

# XTIT : Gets maximum vertical scroll offset
ACTIVITYNAMEGetsmaximumverticalscrolloffset=Gets maximum vertical scroll offset

# XTOL : This is an expression. Use : 
PROPDESCACTIVITYThisisanexpression.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex'myvalue')=This is an expression. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 'myvalue')

# XMSG : Gets the current position of Scroll bar in '$item$'
ACTIVITYTITLEGetsthecurrentpositionofScrollbarin'$item$'=Gets the current position of scrollbar in '$item$'

# XMIT : Gets the current position of Scroll bar in '$item$'
ACTIVITYMENUGetsthecurrentpositionofScrollbarin'$item$'=Gets the current position of scrollbar in '$item$'

# XTOL : Gets the vertical current position of Scroll bar
ACTIVITYDESCGetstheverticalcurrentpositionofScrollbar=Gets the vertical current position of scrollbar

# XTIT : Gets the vertical current position of Scroll bar
ACTIVITYNAMEGetstheverticalcurrentpositionofScrollbar=Gets the vertical current position of scrollbar

# XMSG : Scroll down by one row of '$item$'
ACTIVITYTITLEScrolldownbyonerowof'$item$'=Scroll down by one row of '$item$'

# XMIT : Scroll down by one row of '$item$'
ACTIVITYMENUScrolldownbyonerowof'$item$'=Scroll down by one row of '$item$'

# XTOL : Scroll down by one row in GuiTableControl
ACTIVITYDESCScrolldownbyonerowinGuiTableControl=Scroll down by one row in GuiTableControl

# XTIT : Scroll down by one row
ACTIVITYNAMEScrolldownbyonerow=Scroll down by one row

# XMSG : Scroll to a '$expression$' position from '$item$'
ACTIVITYTITLEScrolltoa'$expression$'positionfrom'$item$'=Scroll to a '$expression$' position from '$item$'

# XMIT : Scroll to a '$expression$' position from '$item$'
ACTIVITYMENUScrolltoa'$expression$'positionfrom'$item$'=Scroll to a '$expression$' position from '$item$'

# XTOL : Scroll to a particular position in GuiTableControl
ACTIVITYDESCScrolltoaparticularpositioninGuiTableControl=Scroll to a particular position in GuiTableControl

# XTIT : Scroll to a particular position
ACTIVITYNAMEScrolltoaparticularposition=Scroll to a particular position

# XTIT : Position in number
PROPNAMEACTIVITYPositioninnumber=Position in number

# XMSG : Scroll up by one row of '$item$'
ACTIVITYTITLEScrollupbyonerowof'$item$'=Scroll up by one row of '$item$'

# XMIT : Scroll up by one row of '$item$'
ACTIVITYMENUScrollupbyonerowof'$item$'=Scroll up by one row of '$item$'

# XTOL : Scroll up by one row in GuiTableControl
ACTIVITYDESCScrollupbyonerowinGuiTableControl=Scroll up by one row in GuiTableControl

# XTIT : Scroll up by one row
ACTIVITYNAMEScrollupbyonerow=Scroll up by one row

# XMSG : Set Caret Position on '$item$'
ACTIVITYTITLESetCaretPositionon'$item$'=Set caret position on '$item$'

# XMIT : Set Caret Position on '$item$'
ACTIVITYMENUSetCaretPositionon'$item$'=Set caret position on '$item$'

# XTOL : Set Caret Position on Text Field
ACTIVITYDESCSetCaretPositiononTextField=Set caret position on text field

# XTIT : Set Caret Position
ACTIVITYNAMESetCaretPosition=Set caret position

# XTIT : GuiTextField
ACTIVITYCATEGORYGuiTextField=GuiTextField

# XTOL : Name of the Item to set caret position.
PROPDESCACTIVITYNameoftheItemtosetcaretposition.=Name of the item to set caret position on.

# XTIT : Caret Position
PROPNAMEACTIVITYCaretPosition=Caret position

# XMSG : Add Appointment $data$ in $item$
ACTIVITYTITLEAddAppointment$data$in$item$=Add appointment $data$ in $item$

# XMIT : Add Appointment $data$ in $item$
ACTIVITYMENUAddAppointment$data$in$item$=Add appointment $data$ in $item$

# XTOL : Add New Appointment
ACTIVITYDESCAddNewAppointment=Add new appointment

# XTIT : addItem
ACTIVITYNAMEaddItem=Add item

# XTIT : Calendar
ACTIVITYCATEGORYCalendar=Calendar

# XTIT : Appointment Title
PROPNAMEACTIVITYAppointmentTitle=Appointment title

# XTOL : Enter appointment Title. 
PROPDESCACTIVITYEnterappointmentTitle.=Enter appointment title.

# XTIT : Appointment Subtitle
PROPNAMEACTIVITYAppointmentSubtitle=Appointment subtitle

# XTOL : Enter appointment details. 
PROPDESCACTIVITYEnterappointmentdetails.=Enter appointment details.

# XTIT : Appointment Type
PROPNAMEACTIVITYAppointmentType=Appointment type

# XTOL : Choose appointment type from the list. 
PROPDESCACTIVITYChooseappointmenttypefromthelist.=Choose appointment type from the list.

# XTIT : Start Date
PROPNAMEACTIVITYStartDate=Start date

# XTOL : Provide A valid start date, The format looks like this - 
PROPDESCACTIVITYProvideAvalidstartdate,Theformatlookslikethis--"Year,Month,Day,Hour,Minute,Second".-IfyouwantafulldayeventthenkeepHourMinuteSecvaluezero.-(ex"2020,07,20,03,00,00")...=Provide a valid start date, The format is - \n- "Year, Month, Day, Hour, Minute, Second". \n- For a full-day event, keep the Hour Minute Sec value zero. \n- (example: "2020, 07, 20, 03, 00, 00")\n...

# XTIT : End Date
PROPNAMEACTIVITYEndDate=End date

# XTOL : Provide A valid end date, The format looks like this - 
PROPDESCACTIVITYProvideAvalidenddate,Theformatlookslikethis--"Year,Month,Day,Hour,Minute,Second".-IfyouwantafulldayeventthenkeepHourMinuteSecvaluezero.-(ex"2020,07,20,04,00,00")...=Provide a valid end date, The format is \n- "Year, Month, Day, Hour, Minute, Second". \n- For a full-day event, keep Hour Minute Sec value zero. \n- (example, "2020, 07, 20, 04, 00, 00")\n...

# XTIT : Creation Status
PROPNAMEACTIVITYCreationStatus=Creation status

# XTOL : This is an 'expression'. Use -
PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-variablenametostoreinavariable(ExvarmyVar)-...=This is an 'expression'. Use -\n- $data$ to get data from the context (example: $data$ + '+++')\n- variable name to store in a variable (example: var myVar)\n- ...

# XMSG : Enumerate Accounts
ACTIVITYTITLEEnumerateAccounts=Enumerate accounts

# XMIT : Enumerate Accounts
ACTIVITYMENUEnumerateAccounts=Enumerate accounts

# XTOL : Enumerate the accounts of the current Outlook instance.
ACTIVITYDESCEnumeratetheaccountsofthecurrentOutlookinstance.=Enumerate the accounts of the current Outlook instance.

# XTIT : Enumerate Accounts
ACTIVITYNAMEEnumerateAccounts=Enumerate accounts

# XTIT : Account
ACTIVITYCATEGORYAccount=Account

# XTOL : Name of the variable of data context to use for this action.
PROPDESCACTIVITYNameofthevariableofdatacontexttouseforthisaction.=Name of the variable from the data context to use for this action.

# XMSG : Accept Appointment
ACTIVITYTITLEAcceptAppointment=Accept appointment

# XMIT : Accept Appointment
ACTIVITYMENUAcceptAppointment=Accept appointment

# XTOL : Accept an appointment.
ACTIVITYDESCAcceptanappointment.=Accept an appointment.

# XTIT : Accept Appointment
ACTIVITYNAMEAcceptAppointment=Accept appointment

# XTIT : Appointment
ACTIVITYCATEGORYAppointment=Appointment

# XMSG : Current Appointment Existing?
ACTIVITYTITLECurrentAppointmentExisting?=Does current appointment exist?

# XMIT : Current Appointment Existing?
ACTIVITYMENUCurrentAppointmentExisting?=Does current appointment exist?

# XTOL : Returns true of the current context appointment is existing, false otherwise.
ACTIVITYDESCReturnstrueofthecurrentcontextappointmentisexisting,falseotherwise.=Returns true if the current context appointment exists, false otherwise.

# XTIT : Current Appointment Existing?
ACTIVITYNAMECurrentAppointmentExisting?=Does current appointment exist?

# XTIT : Context
ACTIVITYCATEGORYContext=Context

# XTOL : Name of the variable of the data context to use for this action.
PROPDESCACTIVITYNameofthevariableofthedatacontexttouseforthisaction.=Name of the variable of the data context to use for this action.

# XMSG : Appointment Context Filter
ACTIVITYTITLEAppointmentContextFilter=Appointment context filter

# XMIT : Appointment Context Filter
ACTIVITYMENUAppointmentContextFilter=Appointment context filter

# XTOL : Perform a selection of appointments which can be used later to work on the items.
ACTIVITYDESCPerformaselectionofappointmentswhichcanbeusedlatertoworkontheitems.=Perform a selection of appointments that can be used later to work on the items.

# XTIT : Appointment Context Filter
ACTIVITYNAMEAppointmentContextFilter=Appointment context filter

# XTIT : startAfterSpecificDate
PROPNAMEACTIVITYstartAfterSpecificDate=Start after specific date

# XTOL : Write a Date Time information to indicate from when an appointment had to start. Note that this parameter depends of your current culture. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc. 
PROPDESCACTIVITYWriteaDateTimeinformationtoindicatefromwhenanappointmenthadtostart.Notethatthisparameterdependsofyourcurrentculture.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Write a date/time information to indicate that the appointment must start after a specific date. Note that this parameter depends on  the culture. /nEnglish="12/25/20 4:30:00 PM"/nFrench="25/12/20 16:30:00", and so on.

# XTIT : endBeforeSpecificDate
PROPNAMEACTIVITYendBeforeSpecificDate=End before specific date

# XTOL : Write a Date Time information to indicate before when an appointment had to finish. Note that this parameter depends of your current culture. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc. 
PROPDESCACTIVITYWriteaDateTimeinformationtoindicatebeforewhenanappointmenthadtofinish.Notethatthisparameterdependsofyourcurrentculture.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Write a date/time information to indicate that the appointment must end before a specific date. Note that the value depends on the  culture. /nEnglish="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00", and so on.

# XTIT : subjectContains
PROPNAMEACTIVITYsubjectContains=Subject contains

# XTOL : Write one or a sequence of words and if they are find in the appointments subject, the appointments will be selected.
PROPDESCACTIVITYWriteoneorasequenceofwordsandiftheyarefindintheappointmentssubject,theappointmentswillbeselected.=Enter one or more words and if that string is found in the appointments' subject, the appointments will be selected.

# XTIT : subjectEqualTo
PROPNAMEACTIVITYsubjectEqualTo=Subject equal to

# XTOL : Write a sequence of words and if this exact sequence is find in the appointments subject, the appointments will be selected.
PROPDESCACTIVITYWriteasequenceofwordsandifthisexactsequenceisfindintheappointmentssubject,theappointmentswillbeselected.=Enter a phrase and if the exact phrase is found in the appointments' subject, the appointments will be selected.

# XTIT : durationHigherThan
PROPNAMEACTIVITYdurationHigherThan=Duration higher than

# XTOL : Duration from which the appointments will be selected.
PROPDESCACTIVITYDurationfromwhichtheappointmentswillbeselected.=Duration from which the appointments will be selected.

# XTIT : durationLowerThan
PROPNAMEACTIVITYdurationLowerThan=Duration lower than

# XTOL : Duration below which the appointments will be selected.
PROPDESCACTIVITYDurationbelowwhichtheappointmentswillbeselected.=Duration before which the appointments will be selected.

# XTIT : includeRecurrent
PROPNAMEACTIVITYincludeRecurrent=Include recurrent

# XTOL : Include the recurrent emails in the filtering.
PROPDESCACTIVITYIncludetherecurrentemailsinthefiltering.=Include the recurrent emails in the filtering.

# XMSG : Select First Appointment
ACTIVITYTITLESelectFirstAppointment=Select first appointment

# XMIT : Select First Appointment
ACTIVITYMENUSelectFirstAppointment=Select first appointment

# XTOL : Define the current appointment as the first appointment of the filtered appointments.
ACTIVITYDESCDefinethecurrentappointmentasthefirstappointmentofthefilteredappointments.=Define the current appointment as the first of the filtered appointments.

# XTIT : Select First Appointment
ACTIVITYNAMESelectFirstAppointment=Select first appointment

# XMSG : Select Last Appointment
ACTIVITYTITLESelectLastAppointment=Select last appointment

# XMIT : Select Last Appointment
ACTIVITYMENUSelectLastAppointment=Select last appointment

# XTOL : Define the current appointment as the last appointment of the filtered appointments.
ACTIVITYDESCDefinethecurrentappointmentasthelastappointmentofthefilteredappointments.=Define the current appointment as the last of the filtered appointments.

# XTIT : Select Last Appointment
ACTIVITYNAMESelectLastAppointment=Select last appointment

# XMSG : Select Next Appointment
ACTIVITYTITLESelectNextAppointment=Select next appointment

# XMIT : Select Next Appointment
ACTIVITYMENUSelectNextAppointment=Select next appointment

# XTOL : Define the current appointment as the next appointment according to the current appointment and the filtered appointments.
ACTIVITYDESCDefinethecurrentappointmentasthenextappointmentaccordingtothecurrentappointmentandthefilteredappointments.=Define the current appointment as the next one according to the current appointment and the filtered appointments.

# XTIT : Select Next Appointment
ACTIVITYNAMESelectNextAppointment=Select next appointment

# XMSG : Select Previous Appointment
ACTIVITYTITLESelectPreviousAppointment=Select previous appointment

# XMIT : Select Previous Appointment
ACTIVITYMENUSelectPreviousAppointment=Select previous appointment

# XTOL : Define the current appointment as the previous appointment according to the current appointment and the filtered appointments.
ACTIVITYDESCDefinethecurrentappointmentasthepreviousappointmentaccordingtothecurrentappointmentandthefilteredappointments.=Define the current appointment as the previous one according to the current appointment and the filtered appointments.

# XTIT : Select Previous Appointment
ACTIVITYNAMESelectPreviousAppointment=Select previous appointment

# XMSG : Create Appointment
ACTIVITYTITLECreateAppointment=Create appointment

# XMIT : Create Appointment
ACTIVITYMENUCreateAppointment=Create appointment

# XTOL : Create Appointment. The generated appointment item will be set as current appointment in the 'appointment context' afterwards if the property updateContext is set to true.
ACTIVITYDESCCreateAppointment.Thegeneratedappointmentitemwillbesetascurrentappointmentinthe'appointmentcontext'afterwardsifthepropertyupdateContextissettotrue.=Create appointment. The generated appointment item will be set as current appointment in the 'appointment context' afterwards if the property updateContext is set to true.

# XTIT : Create Appointment
ACTIVITYNAMECreateAppointment=Create appointment

# XTIT : subject
PROPNAMEACTIVITYsubject=Subject

# XTOL : Subject of the appointment.
PROPDESCACTIVITYSubjectoftheappointment.=Subject of the appointment.

# XTIT : body
PROPNAMEACTIVITYbody=Body

# XTOL : Body of the appointment. To jump a line use \r\n
PROPDESCACTIVITYBodyoftheappointment.Tojumpalineuse\r=Body of the appointment. To start a new line use \r\n

# XTIT : location
PROPNAMEACTIVITYlocation=Location

# XTOL : Location of the appointment.
PROPDESCACTIVITYLocationoftheappointment.=Location of the appointment.

# XTIT : startDateTime
PROPNAMEACTIVITYstartDateTime=Start date time

# XTOL : Date and Time to start the appointment. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc. 
PROPDESCACTIVITYDateandTimetostarttheappointment.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to start the appointment. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

# XTIT : duration
PROPNAMEACTIVITYduration=Duration

# XTOL : Duration in minute of the appointment. Fill either startDateTime and duration or startDateTime and endDateTime. 
PROPDESCACTIVITYDurationinminuteoftheappointment.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.=Duration of the appointment in minutes. Enter either the Start date time and the duration, or the Start date time and the End date time.

# XTIT : endDateTime
PROPNAMEACTIVITYendDateTime=End date time

# XTOL : Date and Time to end the appointment. Fill either startDateTime and duration or startDateTime and endDateTime. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc.
PROPDESCACTIVITYDateandTimetoendtheappointment.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to end the appointment. Enter either the Start date time and the duration, or the Start date time and the End date time. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

# XTIT : importance
PROPNAMEACTIVITYimportance=Importance

# XTOL : Importance of the appointment.
PROPDESCACTIVITYImportanceoftheappointment.=Importance of the appointment.

# XTIT : busyStatus
PROPNAMEACTIVITYbusyStatus=Busy status

# XTOL : Busy status of the appointment.
PROPDESCACTIVITYBusystatusoftheappointment.=Busy status of the appointment.

# XTIT : category
PROPNAMEACTIVITYcategory=Category

# XTOL : Category to use for the appointment. e.g. "MyCategory"
PROPDESCACTIVITYCategorytousefortheappointment.e.g."MyCategory"=Category to use for the appointment, example: "MyCategory"

# XTIT : sensitivity
PROPNAMEACTIVITYsensitivity=Sensitivity

# XTOL : Sensitivity to use for the appointment.
PROPDESCACTIVITYSensitivitytousefortheappointment.=Sensitivity to use for the appointment.

# XTIT : displayOnly
PROPNAMEACTIVITYdisplayOnly=Display only

# XTOL : Display only the appointment but don't send it. Use it only for attended scenario.
PROPDESCACTIVITYDisplayonlytheappointmentbutdon'tsendit.Useitonlyforattendedscenario.=Display the appointment but don't send it. Use it only in attended scenarios.

# XTIT : updateContext
PROPNAMEACTIVITYupdateContext=Update context

# XTOL : If true, the 'appointment context' is automatically updated with the new appointment which is going to be created. No search won't be necessary to work with it.
PROPDESCACTIVITYIftrue,the'appointmentcontext'isautomaticallyupdatedwiththenewappointmentwhichisgoingtobecreated.Nosearchwon'tbenecessarytoworkwithit.=If true, the 'appointment context' is automatically updated with the new appointment to be created. No search is necessary to work with it.

# XMSG : Decline Appointment
ACTIVITYTITLEDeclineAppointment=Decline appointment

# XMIT : Decline Appointment
ACTIVITYMENUDeclineAppointment=Decline appointment

# XTOL : Decline an appointment.
ACTIVITYDESCDeclineanappointment.=Decline an appointment.

# XTIT : Decline Appointment
ACTIVITYNAMEDeclineAppointment=Decline appointment

# XMSG : Delete Appointment
ACTIVITYTITLEDeleteAppointment=Delete appointment

# XMIT : Delete Appointment
ACTIVITYMENUDeleteAppointment=Delete appointment

# XTOL : Delete the current appointment defined in the appointment context'.
ACTIVITYDESCDeletethecurrentappointmentdefinedintheappointmentcontext'.=Delete the current appointment defined in the appointment context.

# XTIT : Delete Appointment
ACTIVITYNAMEDeleteAppointment=Delete appointment

# XMSG : Forward Appointment
ACTIVITYTITLEForwardAppointment=Forward the appointment.

# XMIT : Forward Appointment
ACTIVITYMENUForwardAppointment=Forward appointment

# XTOL : Forward current context appointment.
ACTIVITYDESCForwardcurrentcontextappointment.=Forward current context appointment.

# XTIT : Forward Appointment
ACTIVITYNAMEForwardAppointment=Forward appointment

# XTIT : "To" Recipients
PROPNAMEACTIVITY"To"Recipients="To" recipients

# XTOL : Recipients To. The recipients have to be separated by semicolon. e.g. "email1@factory.com; email2@factory.com; email3@factory.com". If you are using active directory, "FirstName1 LastName1; FirstName2 LastName2; FirstName3 LastName3" can be used instead of the email addresses.
PROPDESCACTIVITYRecipientsTo.Therecipientshavetobeseparatedbysemicolon.e.g."email1@factory.com;email2@factory.com;email3@factory.com".Ifyouareusingactivedirectory,"FirstName1LastName1;FirstName2LastName2;FirstName3LastName3"canbeusedinsteadoftheemail=Recipients must be separated by semicolons, such as "email1@factory.com; email2@factory.com; email3@factory.com". If you are using Active Directory, "FirstName1 LastName1; FirstName2 LastName2; FirstName3 LastName3" can be used instead of the email addresses.

# XTIT : "Cc" Recipients
PROPNAMEACTIVITY"Cc"Recipients="CC" recipients

# XTOL : Recipients Cc. The recipients have to be separated by semicolon. e.g. "email4@factory.com; email5@factory.com". If you are using active directory, "FirstName4 LastName4; FirstName5 LastName5" can be used instead of the email addresses. 
PROPDESCACTIVITYRecipientsCc.Therecipientshavetobeseparatedbysemicolon.e.g."email4@factory.com;email5@factory.com".Ifyouareusingactivedirectory,"FirstName4LastName4;FirstName5LastName5"canbeusedinsteadoftheemailaddresses.=Recipients must be separated by semicolons, such as  "email4@factory.com; email5@factory.com". If you are using Active Directory, "FirstName4 LastName4; FirstName5 LastName5" can be used instead of the email addresses.

# XTIT : "Bcc" Recipients
PROPNAMEACTIVITY"Bcc"Recipients="BCC" recipients

# XTOL : Recipients Bcc. The recipients have to be separated by semicolon. e.g. "email6@factory.com". If you are using active directory, "FirstName6 LastName6" can be used instead of the email addresses.
PROPDESCACTIVITYRecipientsBcc.Therecipientshavetobeseparatedbysemicolon.e.g."email6@factory.com".Ifyouareusingactivedirectory,"FirstName6LastName6"canbeusedinsteadoftheemailaddresses.=Recipients must be separated by semicolons, such as  "email6@factory.com". If you are using Active Directory, "FirstName6 LastName6" can be used instead of the email addresses.

# XTIT : Display Only
PROPNAMEACTIVITYDisplayOnly=Display only

# XTOL : Display only the forwarded email but don't send it. Use it only for attended scenario.
PROPDESCACTIVITYDisplayonlytheforwardedemailbutdon'tsendit.Useitonlyforattendedscenario.=Display the forwarded email but don't send it. Use it only in attended scenarios.

# XMSG : Get Information From Time Slot
ACTIVITYTITLEGetInformationFromTimeSlot=Get information from time slot

# XMIT : Get Information From Time Slot
ACTIVITYMENUGetInformationFromTimeSlot=Get information from time slot

# XTOL : Get appointments information from time slot.
ACTIVITYDESCGetappointmentsinformationfromtimeslot.=Get appointment information from time slot.

# XTIT : Get Information From Time Slot
ACTIVITYNAMEGetInformationFromTimeSlot=Get information from time slot

# XTIT : Helper
ACTIVITYCATEGORYHelper=Helper

# XTOL : Date and Time to start the time slot. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc. 
PROPDESCACTIVITYDateandTimetostartthetimeslot.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to start the time slot. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/nFrench="25/12/20 16:30:00"

# XTOL : Date and Time to end the time slot. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc. 
PROPDESCACTIVITYDateandTimetoendthetimeslot.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to end the time slot. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/nFrench="25/12/20 16:30:00"

# XMSG : Get Status
ACTIVITYTITLEGetStatus=Get status

# XMIT : Get Status
ACTIVITYMENUGetStatus=Get status

# XTOL : Get status of the current context appointment.
ACTIVITYDESCGetstatusofthecurrentcontextappointment.=Get status of the current context appointment.

# XTIT : Get Status
ACTIVITYNAMEGetStatus=Get status

# XMSG : Update Appointment
ACTIVITYTITLEUpdateAppointment=Update appointment

# XMIT : Update Appointment
ACTIVITYMENUUpdateAppointment=Update appointment

# XTOL : Update current context appointment.
ACTIVITYDESCUpdatecurrentcontextappointment.=Update current context appointment.

# XTIT : Update Appointment
ACTIVITYNAMEUpdateAppointment=Update appointment

# XMSG : Create Meeting
ACTIVITYTITLECreateMeeting=Create meeting

# XMIT : Create Meeting
ACTIVITYMENUCreateMeeting=Create meeting

# XTOL : Create Meeting.
ACTIVITYDESCCreateMeeting.=Create meeting.

# XTIT : Create Meeting
ACTIVITYNAMECreateMeeting=Create meeting

# XTIT : Meeting
ACTIVITYCATEGORYMeeting=Meeting

# XTOL : Subject of the meeting.
PROPDESCACTIVITYSubjectofthemeeting.=Subject of the meeting.

# XTOL : Body of the meeting. To jump a line use \r\n
PROPDESCACTIVITYBodyofthemeeting.Tojumpalineuse\r=Body of the meeting. To start a new line use \r\n

# XTOL : Location of the meeting.
PROPDESCACTIVITYLocationofthemeeting.=Location of the meeting.

# XTOL : Date and Time to start the meeting. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc. 
PROPDESCACTIVITYDateandTimetostartthemeeting.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to start the meeting. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

# XTOL : Duration in minute of the meeting. Fill either startDateTime and duration or startDateTime and endDateTime. 
PROPDESCACTIVITYDurationinminuteofthemeeting.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.=Duration of the meeting in minutes. Enter either the Start date time and the duration, or the Start date time and the End date time.

# XTOL : Date and Time to end the meeting. Fill either startDateTime and duration or startDateTime and endDateTime. Note that the value depends of your current culture. English="12/25/20 4:30:00 PM", French="25/12/20 16:30:00", etc.
PROPDESCACTIVITYDateandTimetoendthemeeting.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to end the appointment. Enter either the Start date time and the duration, or the Start date time and the End date time. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

# XTIT : requiredAttendees
PROPNAMEACTIVITYrequiredAttendees=Required attendees

# XTOL : Define recipients of the meeting.
PROPDESCACTIVITYDefinerecipientsofthemeeting.=Define recipients of the meeting.

# XTIT : optionalAttendees
PROPNAMEACTIVITYoptionalAttendees=Optional attendees

# XTOL : Define optional recipients of the meeting.
PROPDESCACTIVITYDefineoptionalrecipientsofthemeeting.=Define optional recipients of the meeting.

# XTIT : resources
PROPNAMEACTIVITYresources=Resources

# XTOL : Define resources of the meeting.
PROPDESCACTIVITYDefineresourcesofthemeeting.=Define resources of the meeting.

# XTOL : Importance of the meeting.
PROPDESCACTIVITYImportanceofthemeeting.=Importance of the meeting.

# XTIT : organizer
PROPNAMEACTIVITYorganizer=Organizer

# XTOL : Organizer of the meeting.
PROPDESCACTIVITYOrganizerofthemeeting.=Organizer of the meeting.

# XTOL : Busy status of the meeting.
PROPDESCACTIVITYBusystatusofthemeeting.=Busy status of the meeting.

# XTIT : reminderSet
PROPNAMEACTIVITYreminderSet=Set reminder

# XTOL : True to activate reminder, false to don't activate it.
PROPDESCACTIVITYTruetoactivatereminder,falsetodon'tactivateit.=True to activate a reminder, false for no reminder.

# XTIT : reminderMinutesBeforeStart
PROPNAMEACTIVITYreminderMinutesBeforeStart=Reminder minutes before start

# XTOL : Define minutes to configure the reminder.
PROPDESCACTIVITYDefineminutestoconfigurethereminder.=Define minutes to configure the reminder.

# XTOL : Category to use for the meeting. e.g. "MyCategory"
PROPDESCACTIVITYCategorytouseforthemeeting.e.g."MyCategory"=Category to use for the meeting, such as "MyCategory"

# XTOL : Sensitivity to use for the meeting.
PROPDESCACTIVITYSensitivitytouseforthemeeting.=Sensitivity to use for the meeting.

# XTOL : Display only the meeting but don't send it. Use it only for attended scenario.
PROPDESCACTIVITYDisplayonlythemeetingbutdon'tsendit.Useitonlyforattendedscenario.=Display the meeting but don't send it. Use it only in attended scenarios.

# XMSG : Enumerate Stores
ACTIVITYTITLEEnumerateStores=Enumerate stores

# XMIT : Enumerate Stores
ACTIVITYMENUEnumerateStores=Enumerate stores

# XTOL : Enumerate the stores of the current Outlook instance.
ACTIVITYDESCEnumeratethestoresofthecurrentOutlookinstance.=Enumerate the stores of the current Outlook instance.

# XTIT : Enumerate Stores
ACTIVITYNAMEEnumerateStores=Enumerate stores

# XTIT : Store
ACTIVITYCATEGORYStore=Store

# XTIT : Where to store Result, means the result has to be store in a variable
PROPNAMEACTIVITYWheretostoreResult=Where to store result

# XMSG : Add New Worksheet
ACTIVITYTITLEAddNewWorksheet=Add new worksheet

# XMIT : Add New Worksheet
ACTIVITYMENUAddNewWorksheet=Add new worksheet

# XTOL : Add a new Excel Worksheet to the active Workbook.
ACTIVITYDESCAddanewExcelWorksheettotheactiveWorkbook.=Add a new Excel worksheet to the active workbook.

# XTIT : Add New Worksheet
ACTIVITYNAMEAddNewWorksheet=Add new worksheet

# XTIT : Worksheet
ACTIVITYCATEGORYWorksheet=Worksheet

# XMSG : Close Excel File
ACTIVITYTITLECloseExcelFile=Close Excel file

# XMIT : Close Excel File
ACTIVITYMENUCloseExcelFile=Close Excel file.

# XTIT : Close Excel File
ACTIVITYNAMECloseExcelFile=Close Excel file

# XMSG : Create new Excel File
ACTIVITYTITLECreatenewExcelFile=Create Excel file.

# XMIT : Create new Excel File
ACTIVITYMENUCreatenewExcelFile=Create Excel file.

# XTOL : Create new Excel File.
ACTIVITYDESCCreatenewExcelFile.=Create Excel file.

# XTIT : Create new Excel File
ACTIVITYNAMECreatenewExcelFile=Create Excel file

# XMSG : Create new Excel Workbook
ACTIVITYTITLECreatenewExcelWorkbook=Create Excel workbook

# XMIT : Create new Excel Workbook
ACTIVITYMENUCreatenewExcelWorkbook=Create Excel workbook

# XTOL : Create new Excel Workbook.
ACTIVITYDESCCreatenewExcelWorkbook.=Create Excel workbook

# XTIT : Create new Excel Workbook
ACTIVITYNAMECreatenewExcelWorkbook=Create Excel workbook

# XTIT : Workbook
ACTIVITYCATEGORYWorkbook=Workbook

# XMSG : Get one value
ACTIVITYTITLEGetonevalue=Get one value

# XMIT : Get one value
ACTIVITYMENUGetonevalue=Get one value

# XTOL : Get one value from a cell
ACTIVITYDESCGetonevaluefromacell=Get one value from a cell

# XTIT : Get one value
ACTIVITYNAMEGetonevalue=Get one value

# XTIT : Data
ACTIVITYCATEGORYData=Data

# XMSG : Use a specific Workbook (already opened)
ACTIVITYTITLEUseaspecificWorkbook(alreadyopened)=Use a specific workbook (already opened)

# XMIT : Use a specific Workbook (already opened)
ACTIVITYMENUUseaspecificWorkbook(alreadyopened)=Use a specific workbook (already opened)

# XTOL : Use a specific Workbook already open.
ACTIVITYDESCUseaspecificWorkbookalreadyopen.=Use a specific workbook that's already open.

# XTIT : Use a specific  Workbook (already opened)
ACTIVITYNAMEUseaspecificWorkbook(alreadyopened)=Use a specific workbook (already opened)

# XMSG : Activate Worksheet
ACTIVITYTITLEActivateWorksheet=Activate worksheet

# XMIT : Activate Worksheet
ACTIVITYMENUActivateWorksheet=Activate worksheet

# XTOL : Activate an Excel Worksheet from the active Workbook.
ACTIVITYDESCActivateanExcelWorksheetfromtheactiveWorkbook.=Activate an Excel worksheet from the active workbook.

# XTIT : Activate Worksheet
ACTIVITYNAMEActivateWorksheet=Activate worksheet

# XTIT : Formulas
ACTIVITYCATEGORYFormulas=Formulas

# XMSG : Get Values
ACTIVITYTITLEGetValues=Get values

# XMIT : Get Values
ACTIVITYMENUGetValues=Get values

# XTOL : Get values from range on the active worksheet.
ACTIVITYDESCGetvaluesfromrangeontheactiveworksheet.=Get values from range on the active worksheet.

# XTIT : Get Values
ACTIVITYNAMEGetValues=Get values

# XMSG : Initialize Excel
ACTIVITYTITLEInitializeExcel=Initialize Excel

# XMIT : Initialize Excel
ACTIVITYMENUInitializeExcel=Initialize Excel

# XTOL : Initializes Excel Library with different modes.
ACTIVITYDESCInitializesExcelLibrarywithdifferentmodes.=Initializes Excel Library with different modes.

# XTIT : Initialize Excel
ACTIVITYNAMEInitializeExcel=Initialize Excel

# XMSG : Open Existing Excel File
ACTIVITYTITLEOpenExistingExcelFile=Open existing Excel file

# XMIT : Open Existing Excel File
ACTIVITYMENUOpenExistingExcelFile=Open existing Excel file.

# XTOL : Open Existing Excel File.
ACTIVITYDESCOpenExistingExcelFile.=Open existing Excel file.

# XTIT : Open Existing Excel File
ACTIVITYNAMEOpenExistingExcelFile=Open existing Excel file

# XTOL : The excel full filename. Ex. 'C:\\myFolder1\\myFolder2\\myWorkbook.xlsx'
PROPDESCACTIVITYTheexcelfullfilename.Ex.'C\\myFolder1\\myFolder2\\myWorkbook.xlsx'=The full Excel filename, such as  'C:\\myFolder1\\myFolder2\\myWorkbook.xlsx'

# XMSG : Release Excel
ACTIVITYTITLEReleaseExcel=Release Excel

# XMIT : Release Excel
ACTIVITYMENUReleaseExcel=Release Excel

# XTIT : SaveAs Excel
ACTIVITYNAMESaveAsExcel=Save as Excel.

# XTOL : The excel full filename. Ex. 'C:\\Folder1\\Folder2\\myWorkbook.xlsx'
PROPDESCACTIVITYTheexcelfullfilename.Ex.'C\\Folder1\\Folder2\\myWorkbook.xlsx'=The full Excel filename, such as 'C:\\Folder1\\Folder2\\myWorkbook.xlsx'

# XMSG : Save Excel File
ACTIVITYTITLESaveExcelFile=Save Excel file

# XMIT : Save Excel File
ACTIVITYMENUSaveExcelFile=Save Excel file

# XTIT : Save Excel File
ACTIVITYNAMESaveExcelFile=Save Excel file

# XMSG : Set one value
ACTIVITYTITLESetonevalue=Set one value

# XMIT : Set one value
ACTIVITYMENUSetonevalue=Set one value

# XTOL : Set one value in a cell
ACTIVITYDESCSetonevalueinacell=Set one value in a cell

# XTIT : Set one value
ACTIVITYNAMESetonevalue=Set one value

# XMSG : Set values
ACTIVITYTITLESetvalues=Set values.

# XMIT : Set values
ACTIVITYMENUSetvalues=Set values

# XTOL : Set values in a range.
ACTIVITYDESCSetvaluesinarange.=Set values in a range.

# XTIT : Set values
ACTIVITYNAMESetvalues=Set values

# XTOL : If true, add the keys as Header of the table.
PROPDESCACTIVITYIftrue,addthekeysasHeaderofthetable.=If true, add the keys as table headers.

# XMSG : Get All Text $item$
ACTIVITYTITLEGetAllText$item$=Get all text $item$

# XMIT : Get All Text $item$
ACTIVITYMENUGetAllText$item$=Get all text $item$

# XTOL : Get entire data as text of the feed content
ACTIVITYDESCGetentiredataastextofthefeedcontent=Get entire data as text of the feed content

# XTIT : Get Alt Text
ACTIVITYNAMEGetAltText=Get alt text

# XMSG : Get Subheader $item$
ACTIVITYTITLEGetSubheader$item$=Get subheader $item$.

# XMIT : Get Subheader $item$
ACTIVITYMENUGetSubheader$item$=Get subheader $item$

# XTOL : Get subheader of the feed content control
ACTIVITYDESCGetsubheaderofthefeedcontentcontrol=Get subheader of the feed content control

# XTIT : Get Subheader
ACTIVITYNAMEGetSubheader=Get subheader

# XTIT : Search
ACTIVITYNAMESearch=Search

# XTIT : Search Field
ACTIVITYCATEGORYSearchField=Search field

# XMSG : Set Content $item$
ACTIVITYTITLESetContent$item$=Set content $item$.

# XMIT : Set Content $item$
ACTIVITYMENUSetContent$item$=Set content $item$

# XTOL : Set Content in the feed content control
ACTIVITYDESCSetContentinthefeedcontentcontrol=Set content in the feed content control

# XTIT : Set Content Text
ACTIVITYNAMESetContentText=Set content txt

# XTIT : Enter Content Text
PROPNAMEACTIVITYEnterContentText=Enter content text

# XMSG : Set subheader $item$
ACTIVITYTITLESetsubheader$item$=Set subheader $item$.

# XMIT : Set subheader $item$
ACTIVITYMENUSetsubheader$item$=Set subheader $item$

# XTOL : Set Subheader in the feed content
ACTIVITYDESCSetSubheaderinthefeedcontent=Set subheader in the feed content

# XTIT : Set Subheader
ACTIVITYNAMESetSubheader=Set subheader

# XTIT : Enter Subheader
PROPNAMEACTIVITYEnterSubheader=Enter subheader

# XMSG : Set Neumeric data $item$
ACTIVITYTITLESetNeumericdata$item$=Set numeric data $item$.

# XMIT : Set Neumeric data $item$
ACTIVITYMENUSetNeumericdata$item$=Set numeric data $item$

# XTOL : Set neumeric data in feed content
ACTIVITYDESCSetneumericdatainfeedcontent=Set numeric data in feed content

# XTIT : Set Numeric Value
PROPNAMEACTIVITYSetNumericValue=Set numeric value

# XMSG : Release Outlook
ACTIVITYTITLEReleaseOutlook=Release Outlook.

# XMIT : Release Outlook
ACTIVITYMENUReleaseOutlook=Release Outlook

# XTOL : Release Outlook.
ACTIVITYDESCReleaseOutlook.=Release Outlook.

# XTIT : Release Outlook
ACTIVITYNAMEReleaseOutlook=Release Outlook

# XMSG : Get Numeric data $item$
ACTIVITYTITLEGetNumericdata$item$=Get numeric data $item$.

# XMIT : Get Numeric data $item$
ACTIVITYMENUGetNumericdata$item$=Get numeric data $item$

# XTOL : Get numeric data from feed content
ACTIVITYDESCGetnumericdatafromfeedcontent=Get numeric data from feed content

# XTIT : Get Numeric
ACTIVITYNAMEGetNumeric=Get numeric

# XMSG : Set Numeric data $item$
ACTIVITYTITLESetNumericdata$item$=Set numeric data $item$.

# XMIT : Set Numeric data $item$
ACTIVITYMENUSetNumericdata$item$=Set numeric data $item$

# XTOL : Set numeric data in feed content
ACTIVITYDESCSetnumericdatainfeedcontent=Set numeric data in feed content

# XTIT : Set Numeric
ACTIVITYNAMESetNumeric=Set numeric

# XMSG : Clear all selected row in $item$
ACTIVITYTITLEClearallselectedrowin$item$=Clear all selected row in $item$.

# XMIT : Clear all selected row in $item$
ACTIVITYMENUClearallselectedrowin$item$=Clear all selected row in $item$

# XTOL : Clear all selected rows in GUICtrlGridView
ACTIVITYDESCClearallselectedrowsinGUICtrlGridView=Clear all selected rows in GUICtrlGridView

# XTIT : Deselect All Rows
ACTIVITYNAMEDeselectAllRows=Deselect all rows

# XTOL : Name of the Item to use for this action.
PROPDESCACTIVITYNameoftheItemtouseforthisaction.=Name of the item to use for this action.

# XTOL : This is an 'expression'. Use -
PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(ExvarmyValue')-...=This is an 'expression'. Use $data$ to get data from the context (example: $data$ + '+++') '...' to set a constant value (example: 'myValue') ...

# XTIT : Where to store Result.
PROPNAMEACTIVITYWheretostoreResult.=Where to store result

# XTOL : This is an 'expression'. Use -
PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(ExvarmyValue)-...=This is an 'expression'. Use $data$ to get data from the Context (Ex: $data$ + '+++') '...' to set a constant value (Ex: var myValue) ...

# XMSG : Select all rows in $item$
ACTIVITYTITLESelectallrowsin$item$=Select all rows in $item$.

# XMIT : Select all rows in $item$
ACTIVITYMENUSelectallrowsin$item$=Select all rows in $item$

# XTOL : Select the GUICtrlGridView Rows
ACTIVITYDESCSelecttheGUICtrlGridViewRows=Select the GUICtrlGridView rows

# XTIT : Select All Rows
ACTIVITYNAMESelectAllRows=Select all rows

# XTOL : Use this parameter only in case of Column Tree.
PROPDESCACTIVITYUsethisparameteronlyincaseofColumnTree.-Thisparameterisignoredfortreetypesotherthancolumntree.-Sinceparameterscannotbeemptyinanactivity,0isthedefaultparameter.-=Use this parameter only in case of Column Tree. This parameter is ignored for tree types other than column tree. Since parameters cannot be empty in an activity, 0 is the default parameter. 

# XMSG : Click the button in GUICtrlGridView Cell of row $expression$ and col $col$ in $item$
ACTIVITYTITLEClickthebuttoninGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Click the button in GUICtrlGridView Cell of row $expression$ and col $col$ in $item$.

# XMIT : Click the button in GUICtrlGridView Cell of row $expression$ and col $col$ in $item$
ACTIVITYMENUClickthebuttoninGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Click the button in GUICtrlGridView Cell of row $expression$ and col $col$ in $item$

# XTOL : Click the button in GUICtrlGridView Cell
ACTIVITYDESCClickthebuttoninGUICtrlGridViewCell=Click the button in GUICtrlGridView cell

# XTIT : Click Button Cell
ACTIVITYNAMEClickButtonCell=Click button cell

# XMSG : Scroll to next page in $item$
ACTIVITYTITLEScrolltonextpagein$item$=Scroll to next page in $item$.

# XMIT : Scroll to next page in $item$
ACTIVITYMENUScrolltonextpagein$item$=Scroll to next page in $item$

# XTOL : Scroll to next page in GuiUserArea
ACTIVITYDESCScrolltonextpageinGuiUserArea=Scroll to next page in GuiUserArea

# XTIT : GuiUserArea
ACTIVITYCATEGORYGuiUserArea=GuiUserArea

# XMSG : Scroll to previous page in $item$
ACTIVITYTITLEScrolltopreviouspagein$item$=Scroll to previous page in $item$.

# XMIT : Scroll to previous page in $item$
ACTIVITYMENUScrolltopreviouspagein$item$=Scroll to previous page in $item$

# XTOL : Scroll to previous page in GuiUserArea
ACTIVITYDESCScrolltopreviouspageinGuiUserArea=Scroll to previous page in GuiUserArea


# XMSG : Create filter
ACTIVITYTITLECreatefilter=Create filter.

# XMIT : Create filter
ACTIVITYMENUCreatefilter=Create filter

# XTOL : Limit other actions to page ranges or certain areas of a PDF
ACTIVITYDESCLimitotheractionstopagerangesorcertainareasofaPDF=Limit other actions to page ranges or certain areas of a PDF

# XTIT : Create filter for text extraction
ACTIVITYNAMECreatefilterfortextextraction=Create filter for text extraction

# XTIT : PDF
ACTIVITYCATEGORYPDF=PDF

# XTIT : Page Range
PROPNAMEACTIVITYPageRange=Page Range

# XTOL : The Page Range relevant for extracting specific word tokens. Example: "1,3,7-9"
PROPDESCACTIVITYThePageRangerelevantforextractingspecificwordtokens.Example"1,3,7-9"=The Page Range relevant for extracting specific word tokens. Example: "1,3,7-9"

# XTIT : Top Offset
PROPNAMEACTIVITYTopOffset=Top offset

# XTOL : Distance of bounding box from top side of PDF.
PROPDESCACTIVITYDistanceofboundingboxfromtopsideofPDF.=Distance of bounding box from top side of PDF.

# XTIT : Left Offset
PROPNAMEACTIVITYLeftOffset=Left offset

# XTOL : Distance of bounding box from left side of PDF.
PROPDESCACTIVITYDistanceofboundingboxfromleftsideofPDF.=Distance of bounding box from left side of PDF.

# XTIT : Width
PROPNAMEACTIVITYWidth=Width

# XTOL : Width of the bounding box to extract text from.
PROPDESCACTIVITYWidthoftheboundingboxtoextracttextfrom.=Width of the bounding box to extract text from.

# XTIT : Height
PROPNAMEACTIVITYHeight=Height

# XTOL : Height of the bounding box to extract text from.
PROPDESCACTIVITYHeightoftheboundingboxtoextracttextfrom.=Height of the bounding box to extract text from.

# XTOL : Name of the variable from the data context to use for this action.
PROPDESCACTIVITYNameofthevariablefromthedatacontexttouseforthisaction.=Name of the variable from the data context to use for this action.

# XMSG : Extract text
ACTIVITYTITLEExtracttext=Extract text.

# XMIT : Extract text
ACTIVITYMENUExtracttext=Extract text

# XTOL : Extract text with Regex
ACTIVITYDESCExtracttextwithRegex=Extract text with Regex.

# XTIT : Extract text with Regex
ACTIVITYNAMEExtracttextwithRegex=Extract text with Regex

# XTIT : Regular Expression
PROPNAMEACTIVITYRegularExpression=Regular Expression

# XTOL : Declaration of the regular expression to extract relevant text. If your text contains something like "Invoice Nr: BS00722" and you want to extract the invoice number your regex should be /Invoice Nr: ([A-Z0-9]+)/
PROPDESCACTIVITYDeclarationoftheregularexpressiontoextractrelevanttext.Ifyourtextcontainssomethinglike"InvoiceNrBS00722"andyouwanttoextracttheinvoicenumberyourregexshouldbe/InvoiceNr([A-Z0-9]+)/=Declaration of the regular expression to extract relevant text. If your text contains something like "Invoice Nr: BS00722" and you want to extract the invoice number your regex should be /Invoice Nr: ([A-Z0-9]+)/

# XTIT : Filter
PROPNAMEACTIVITYFilter=Filter

# XTOL : To filter the result, provide a filter object created with the 'Create Filter' action or ctx.pdf.createFilter(..).
PROPDESCACTIVITYTofiltertheresult,provideafilterobjectcreatedwiththe'CreateFilter'actionorctx.pdf.createFilter(..).=To filter the result, provide a filter object created with the 'Create Filter' action or ctx.pdf.createFilter(..).

# XMSG : Get number of pages
ACTIVITYTITLEGetnumberofpages=Get number of pages.

# XMIT : Get number of pages
ACTIVITYMENUGetnumberofpages=Get number of pages

# XTOL : Gets the total number of pages in the PDF
ACTIVITYDESCGetsthetotalnumberofpagesinthePDF=Gets the total number of pages in the PDF

# XTIT : Get number of pages
ACTIVITYNAMEGetnumberofpages=Get number of pages

# XMSG : Get text
ACTIVITYTITLEGettext=Get text.

# XMIT : Get text
ACTIVITYMENUGettext=Get text

# XTOL : Get text
ACTIVITYDESCGettext=Get text

# XTIT : Get text
ACTIVITYNAMEGettext=Get text

# XMSG : Get page dimensions
ACTIVITYTITLEGetpagedimensions=Get page dimensions.

# XMIT : Get page dimensions
ACTIVITYMENUGetpagedimensions=Get page dimensions

# XTOL : Get dimensions of a given page in the PDF
ACTIVITYDESCGetdimensionsofagivenpageinthePDF=Get dimensions of a given page in the PDF

# XTIT : Get page dimensions
ACTIVITYNAMEGetpagedimensions=Get page dimensions

# XTIT : PDF page number
PROPNAMEACTIVITYPDFpagenumber=PDF page number

# XTOL : The page number for the Viewport
PROPDESCACTIVITYThepagenumberfortheViewport=The page number for the Viewport

# XMSG : Open PDF
ACTIVITYTITLEOpenPDF=Open PDF

# XMIT : Open PDF
ACTIVITYMENUOpenPDF=Open PDF

# XTOL : Open a PDF
ACTIVITYDESCOpenaPDF=Open a PDF

# XTIT : Open PDF
ACTIVITYNAMEOpenPDF=Open PDF

# XTIT : PDF filename
PROPNAMEACTIVITYPDFfilename=PDF filename

# XTOL : The full qualified PDF filename. Ex. 'C:\\MyFolder\\Invoice.pdf'. Can be an expression or string.
PROPDESCACTIVITYThefullqualifiedPDFfilename.Ex.'C\\MyFolder\\Invoice.pdf'.Canbeanexpressionorstring.=The full qualified PDF filename. Ex. 'C:\\MyFolder\\Invoice.pdf'. Can be an expression or a string.

# XTIT : Password
PROPNAMEACTIVITYPassword=Password

# XTOL : Provide a password for proteced PDF files.
PROPDESCACTIVITYProvideapasswordforprotecedPDFfiles.=Provide a password for proteced PDF files.

# XMSG : Release PDF
ACTIVITYTITLEReleasePDF=Release PDF.

# XMIT : Release PDF
ACTIVITYMENUReleasePDF=Release PDF

# XTOL : Close PDF and release resources.
ACTIVITYDESCClosePDFandreleaseresources.=Close PDF and release resources.

# XTIT : Release PDF
ACTIVITYNAMEReleasePDF=Release PDF

# XMSG : Start refresh on polling
ACTIVITYTITLEStartrefreshonpolling=Start refresh on polling

# XMIT : Start refresh on polling
ACTIVITYMENUStartrefreshonpolling=Start refresh on polling

# XTOL : starts polling process on sap gui.
ACTIVITYDESCstartspollingprocessonsapgui.=Starts polling process on SAP GUI.

# XTIT : StartRefreshOnPolling
ACTIVITYNAMEStartRefreshOnPolling=StartRefreshOnPolling

# XTOL : Name of the page on which this action is called
PROPDESCACTIVITYNameofthepageonwhichthisactioniscalled=Name of the page on which this action is called

# XMSG : Stop refresh on polling
ACTIVITYTITLEStoprefreshonpolling=Stop refresh on polling

# XMIT : Stop refresh on polling
ACTIVITYMENUStoprefreshonpolling=Stop refresh on polling

# XTOL : stops polling process on sap gui.
ACTIVITYDESCstopspollingprocessonsapgui.=Stops polling process on SAP GUI.

# XTIT : StopRefreshOnPolling
ACTIVITYNAMEStopRefreshOnPolling=StopRefreshOnPolling
